
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Mar 03 21:03:21 CET 2025
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Mar 03 21:03:21 CET 2025
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\006\005" +
    "\000\002\006\003\000\002\007\003\000\002\007\004\000" +
    "\002\007\006\000\002\011\005\000\002\012\003\000\002" +
    "\012\002\000\002\013\005\000\002\013\003\000\002\014" +
    "\005\000\002\016\003\000\002\016\002\000\002\010\004" +
    "\000\002\015\003\000\002\017\006\000\002\017\003\000" +
    "\002\020\004\000\002\020\003\000\002\021\004\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\022\005\000\002\022\003" +
    "\000\002\005\003\000\002\005\002\000\002\023\003\000" +
    "\002\024\005\000\002\024\003\000\002\025\004\000\002" +
    "\025\003\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\003\000\002\025\004" +
    "\000\002\025\004\000\002\025\005\000\002\025\003\000" +
    "\002\027\004\000\002\030\004\000\002\031\004\000\002" +
    "\032\005\000\002\033\003\000\002\033\002\000\002\034" +
    "\005\000\002\034\003\000\002\026\003\000\002\035\005" +
    "\000\002\035\003\000\002\036\005\000\002\036\003\000" +
    "\002\040\005\000\002\040\005\000\002\040\003\000\002" +
    "\041\005\000\002\041\005\000\002\041\003\000\002\042" +
    "\005\000\002\042\003\000\002\044\004\000\002\044\004" +
    "\000\002\044\003\000\002\045\004\000\002\045\003\000" +
    "\002\047\003\000\002\047\005\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\046\005\000\002\046" +
    "\004\000\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\004\055\005\001\002\000\004\002\217\001" +
    "\002\000\052\004\014\005\011\006\025\007\020\016\021" +
    "\017\ufffd\021\ufffd\022\017\023\ufffd\024\ufffd\025\ufffd\026" +
    "\ufffd\027\ufffd\030\022\031\ufffd\035\016\055\ufffd\056\ufffd" +
    "\062\ufffd\063\012\001\002\000\004\002\001\001\002\000" +
    "\006\052\215\057\214\001\002\000\010\035\uffea\051\uffea" +
    "\065\uffea\001\002\000\010\035\uffe8\051\uffe8\065\uffe8\001" +
    "\002\000\020\004\014\005\011\006\025\007\020\022\017" +
    "\035\016\063\012\001\002\000\010\035\uffec\051\uffec\065" +
    "\uffec\001\002\000\010\035\uffe6\051\uffe6\065\uffe6\001\002" +
    "\000\010\035\uffee\051\uffee\065\210\001\002\000\010\035" +
    "\uffe4\051\uffe4\065\uffe4\001\002\000\020\004\014\005\011" +
    "\006\025\007\020\022\017\035\016\063\012\001\002\000" +
    "\010\035\uffe5\051\uffe5\065\uffe5\001\002\000\004\035\166" +
    "\001\002\000\020\004\014\005\011\006\025\007\020\022" +
    "\017\035\016\063\012\001\002\000\006\052\ufffa\057\ufffa" +
    "\001\002\000\006\052\ufffb\057\ufffb\001\002\000\010\035" +
    "\uffe7\051\uffe7\065\uffe7\001\002\000\004\035\164\001\002" +
    "\000\030\017\037\021\031\023\033\024\042\025\030\026" +
    "\043\027\040\031\045\055\005\056\uffe0\062\041\001\002" +
    "\000\026\012\060\013\065\014\076\015\077\032\075\033" +
    "\055\034\056\035\062\037\101\053\100\001\002\000\026" +
    "\012\060\013\065\014\076\015\077\032\075\033\055\034" +
    "\056\035\062\037\101\053\100\001\002\000\010\020\157" +
    "\056\uffdb\057\uffdb\001\002\000\026\012\060\013\065\014" +
    "\076\015\077\032\075\033\055\034\056\035\062\037\101" +
    "\053\100\001\002\000\006\056\uffd2\057\uffd2\001\002\000" +
    "\004\056\155\001\002\000\006\056\uffdd\057\uffdd\001\002" +
    "\000\026\012\060\013\065\014\076\015\077\032\075\033" +
    "\055\034\056\035\062\037\101\053\100\001\002\000\006" +
    "\056\uffd6\057\uffd6\001\002\000\026\012\060\013\065\014" +
    "\076\015\077\032\075\033\055\034\056\035\062\037\101" +
    "\053\100\001\002\000\026\012\060\013\065\014\076\015" +
    "\077\032\075\033\055\034\056\035\062\037\101\053\100" +
    "\001\002\000\026\012\060\013\065\014\076\015\077\032" +
    "\075\033\055\034\056\035\062\037\101\053\100\001\002" +
    "\000\004\056\uffe1\001\002\000\004\035\051\001\002\000" +
    "\006\056\uffdf\057\047\001\002\000\026\017\037\021\031" +
    "\023\033\024\042\025\030\026\043\027\040\031\045\055" +
    "\005\062\041\001\002\000\006\056\uffde\057\uffde\001\002" +
    "\000\004\053\053\001\002\000\006\056\uffd3\057\uffd3\001" +
    "\002\000\030\012\060\013\065\014\076\015\077\032\075" +
    "\033\055\034\056\035\062\037\101\053\100\054\uffcc\001" +
    "\002\000\060\010\uffb7\011\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7" +
    "\060\uffb7\061\uffb7\063\uffb7\065\uffb7\066\uffb7\001\002\000" +
    "\060\010\uffb4\011\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4" +
    "\061\uffb4\063\uffb4\065\uffb4\066\uffb4\001\002\000\060\010" +
    "\uffb1\011\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\063\uffb1\065\uffb1\066\uffb1\001\002\000\006\054\uffca\060" +
    "\uffca\001\002\000\026\012\060\013\065\014\076\015\077" +
    "\032\075\033\055\034\056\035\062\037\101\053\100\001" +
    "\002\000\006\054\uffcd\060\144\001\002\000\060\010\uffb0" +
    "\011\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\063" +
    "\uffb0\065\uffb0\066\uffb0\001\002\000\060\010\uffb8\011\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\054\uffb8" +
    "\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\063\uffb8\065" +
    "\uffb8\066\uffb8\001\002\000\060\010\uffba\011\uffba\036\uffba" +
    "\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045" +
    "\uffba\046\uffba\047\uffba\050\uffba\051\uffba\054\uffba\055\uffba" +
    "\056\uffba\057\uffba\060\uffba\061\136\063\137\065\140\066" +
    "\uffba\001\002\000\060\010\uffb3\011\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\060\uffb3\061\uffb3\063\uffb3\065\uffb3\066\uffb3\001" +
    "\002\000\052\010\uffbd\011\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\066\uffbd\001\002\000\052\010\126\011\131\036" +
    "\uffbf\037\uffbf\040\127\041\130\042\124\043\uffbf\044\uffbf" +
    "\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\054\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\060\uffbf\066\uffbf\001\002\000\040" +
    "\036\uffc2\037\122\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047" +
    "\uffc2\050\uffc2\051\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\060\uffc2\066\uffc2\001\002\000\036\036\120\043\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\060\uffc5\066\uffc5\001\002\000" +
    "\034\043\111\044\112\045\106\046\110\047\107\050\115" +
    "\051\114\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\066" +
    "\uffc7\001\002\000\016\054\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\060\uffc9\066\uffc9\001\002\000\004\054\105\001\002\000" +
    "\060\010\uffb5\011\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5" +
    "\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050" +
    "\uffb5\051\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5" +
    "\061\uffb5\063\uffb5\065\uffb5\066\uffb5\001\002\000\060\010" +
    "\uffb2\011\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051" +
    "\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2" +
    "\063\uffb2\065\uffb2\066\uffb2\001\002\000\060\010\uffaf\011" +
    "\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf" +
    "\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\054" +
    "\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\063\uffaf" +
    "\065\uffaf\066\uffaf\001\002\000\026\012\060\013\065\014" +
    "\076\015\077\032\075\033\055\034\056\035\062\037\101" +
    "\053\100\001\002\000\026\012\060\013\065\014\076\015" +
    "\077\032\075\033\055\034\056\035\062\037\101\053\100" +
    "\001\002\000\052\010\uffbc\011\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\054\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\060\uffbc\066\uffbc\001\002\000\004\054\104\001\002" +
    "\000\060\010\uffb6\011\uffb6\036\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060" +
    "\uffb6\061\uffb6\063\uffb6\065\uffb6\066\uffb6\001\002\000\006" +
    "\056\uffce\057\uffce\001\002\000\026\012\uffaa\013\uffaa\014" +
    "\uffaa\015\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\037\uffaa" +
    "\053\uffaa\001\002\000\026\012\uffad\013\uffad\014\uffad\015" +
    "\uffad\032\uffad\033\uffad\034\uffad\035\uffad\037\uffad\053\uffad" +
    "\001\002\000\026\012\uffa9\013\uffa9\014\uffa9\015\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\037\uffa9\053\uffa9\001\002" +
    "\000\026\012\uffae\013\uffae\014\uffae\015\uffae\032\uffae\033" +
    "\uffae\034\uffae\035\uffae\037\uffae\053\uffae\001\002\000\026" +
    "\012\uffac\013\uffac\014\uffac\015\uffac\032\uffac\033\uffac\034" +
    "\uffac\035\uffac\037\uffac\053\uffac\001\002\000\026\012\060" +
    "\013\065\014\076\015\077\032\075\033\055\034\056\035" +
    "\062\037\101\053\100\001\002\000\026\012\060\013\065" +
    "\014\076\015\077\032\075\033\055\034\056\035\062\037" +
    "\101\053\100\001\002\000\026\012\uffab\013\uffab\014\uffab" +
    "\015\uffab\032\uffab\033\uffab\034\uffab\035\uffab\037\uffab\053" +
    "\uffab\001\002\000\016\054\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\066\uffc8\001\002\000\036\036\120\043\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\054\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\060\uffc6\066\uffc6\001\002\000" +
    "\026\012\060\013\065\014\076\015\077\032\075\033\055" +
    "\034\056\035\062\037\101\053\100\001\002\000\036\036" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\066" +
    "\uffc4\001\002\000\026\012\060\013\065\014\076\015\077" +
    "\032\075\033\055\034\056\035\062\037\101\053\100\001" +
    "\002\000\036\036\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\054\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\060\uffc3\066\uffc3\001\002\000\026\012\uffa6\013\uffa6" +
    "\014\uffa6\015\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\037" +
    "\uffa6\053\uffa6\001\002\000\026\012\060\013\065\014\076" +
    "\015\077\032\075\033\055\034\056\035\062\037\101\053" +
    "\100\001\002\000\026\012\060\013\065\014\076\015\077" +
    "\032\075\033\055\034\056\035\062\037\101\053\100\001" +
    "\002\000\026\012\uffa8\013\uffa8\014\uffa8\015\uffa8\032\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\037\uffa8\053\uffa8\001\002\000" +
    "\026\012\uffa7\013\uffa7\014\uffa7\015\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\037\uffa7\053\uffa7\001\002\000\026\012" +
    "\060\013\065\014\076\015\077\032\075\033\055\034\056" +
    "\035\062\037\101\053\100\001\002\000\046\036\uffc0\037" +
    "\uffc0\040\127\041\130\042\124\043\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\066\uffc0\001\002\000\040\036\uffc1" +
    "\037\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050" +
    "\uffc1\051\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1" +
    "\066\uffc1\001\002\000\052\010\uffbe\011\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\050\uffbe\051\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\060\uffbe\066\uffbe\001\002\000\060\010\uffb9" +
    "\011\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043" +
    "\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\063" +
    "\uffb9\065\uffb9\066\uffb9\001\002\000\004\035\143\001\002" +
    "\000\060\010\uffa3\011\uffa3\036\uffa3\037\uffa3\040\uffa3\041" +
    "\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\051\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060" +
    "\uffa3\061\uffa3\063\uffa3\065\uffa3\066\uffa3\001\002\000\026" +
    "\012\060\013\065\014\076\015\077\032\075\033\055\034" +
    "\056\035\062\037\101\053\100\001\002\000\004\066\142" +
    "\001\002\000\060\010\uffa5\011\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5" +
    "\047\uffa5\050\uffa5\051\uffa5\054\uffa5\055\uffa5\056\uffa5\057" +
    "\uffa5\060\uffa5\061\uffa5\063\uffa5\065\uffa5\066\uffa5\001\002" +
    "\000\060\010\uffa4\011\uffa4\036\uffa4\037\uffa4\040\uffa4\041" +
    "\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4" +
    "\050\uffa4\051\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060" +
    "\uffa4\061\uffa4\063\uffa4\065\uffa4\066\uffa4\001\002\000\026" +
    "\012\060\013\065\014\076\015\077\032\075\033\055\034" +
    "\056\035\062\037\101\053\100\001\002\000\006\054\uffcb" +
    "\060\uffcb\001\002\000\052\010\uffbb\011\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb" +
    "\046\uffbb\047\uffbb\050\uffbb\051\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\066\uffbb\001\002\000\006\056\uffd7" +
    "\057\uffd7\001\002\000\006\056\uffd4\057\uffd4\001\002\000" +
    "\006\056\uffdc\057\uffdc\001\002\000\010\020\uffd1\056\uffd1" +
    "\057\uffd1\001\002\000\004\055\005\001\002\000\010\020" +
    "\uffcf\056\uffcf\057\uffcf\001\002\000\014\002\uffff\020\uffff" +
    "\052\uffff\056\uffff\057\uffff\001\002\000\006\056\uffd5\057" +
    "\uffd5\001\002\000\004\055\005\001\002\000\006\056\uffda" +
    "\057\uffda\001\002\000\006\056\uffd0\057\uffd0\001\002\000" +
    "\006\056\uffd9\057\uffd9\001\002\000\006\056\uffd8\057\uffd8" +
    "\001\002\000\016\035\uffef\051\uffef\052\uffef\057\uffef\060" +
    "\uffef\065\uffef\001\002\000\006\052\ufff9\057\ufff9\001\002" +
    "\000\004\053\167\001\002\000\022\004\014\005\011\006" +
    "\025\007\020\022\017\035\016\054\ufff5\063\012\001\002" +
    "\000\004\055\005\001\002\000\006\052\ufff8\057\ufff8\001" +
    "\002\000\006\054\ufff3\060\ufff3\001\002\000\004\054\203" +
    "\001\002\000\006\035\ufff0\051\201\001\002\000\006\054" +
    "\ufff6\060\176\001\002\000\020\004\014\005\011\006\025" +
    "\007\020\022\017\035\016\063\012\001\002\000\006\054" +
    "\ufff4\060\ufff4\001\002\000\004\035\202\001\002\000\004" +
    "\035\ufff1\001\002\000\006\054\ufff2\060\ufff2\001\002\000" +
    "\004\055\ufff7\001\002\000\012\035\uffe2\051\uffe2\060\uffe2" +
    "\065\uffe2\001\002\000\012\035\uffe9\051\uffe9\060\206\065" +
    "\uffe9\001\002\000\020\004\014\005\011\006\025\007\020" +
    "\022\017\035\016\063\012\001\002\000\012\035\uffe3\051" +
    "\uffe3\060\uffe3\065\uffe3\001\002\000\004\032\211\001\002" +
    "\000\004\066\212\001\002\000\010\035\uffed\051\uffed\065" +
    "\uffed\001\002\000\010\035\uffeb\051\uffeb\065\uffeb\001\002" +
    "\000\024\004\014\005\011\006\025\007\020\016\021\022" +
    "\017\030\022\035\016\063\012\001\002\000\030\017\ufffe" +
    "\021\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\031" +
    "\ufffe\055\ufffe\056\ufffe\062\ufffe\001\002\000\006\052\ufffc" +
    "\057\ufffc\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\022\004\026\006\006\007\023\010\022\015\025" +
    "\017\014\020\012\021\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\212\021\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\203" +
    "\015\025\017\014\020\012\021\007\022\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\164\015\025" +
    "\017\014\020\012\021\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\033\005\034\023\043\024\045\025\035\027\031\001" +
    "\001\000\026\026\162\035\072\036\071\040\070\041\067" +
    "\042\066\044\065\045\063\047\062\050\053\001\001\000" +
    "\030\026\152\031\161\035\072\036\071\040\070\041\067" +
    "\042\066\044\065\045\063\047\062\050\053\001\001\000" +
    "\004\030\157\001\001\000\026\026\155\035\072\036\071" +
    "\040\070\041\067\042\066\044\065\045\063\047\062\050" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\026\152\031\151\035\072\036\071\040" +
    "\070\041\067\042\066\044\065\045\063\047\062\050\053" +
    "\001\001\000\002\001\001\000\026\026\150\035\072\036" +
    "\071\040\070\041\067\042\066\044\065\045\063\047\062" +
    "\050\053\001\001\000\026\026\147\035\072\036\071\040" +
    "\070\041\067\042\066\044\065\045\063\047\062\050\053" +
    "\001\001\000\026\026\146\035\072\036\071\040\070\041" +
    "\067\042\066\044\065\045\063\047\062\050\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\033\025\047\027\031\001\001\000\002\001\001" +
    "\000\004\032\051\001\001\000\002\001\001\000\032\026" +
    "\056\033\073\034\060\035\072\036\071\040\070\041\067" +
    "\042\066\044\065\045\063\047\062\050\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\044\145\045\063\047\062\050\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\035\102\036\071\040\070\041\067\042" +
    "\066\044\065\045\063\047\062\050\053\001\001\000\012" +
    "\044\101\045\063\047\062\050\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\040\116\041\067" +
    "\042\066\044\065\045\063\047\062\050\053\001\001\000" +
    "\024\035\115\036\071\040\070\041\067\042\066\044\065" +
    "\045\063\047\062\050\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\041\120\042\066" +
    "\044\065\045\063\047\062\050\053\001\001\000\002\001" +
    "\001\000\016\041\122\042\066\044\065\045\063\047\062" +
    "\050\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\044\133\045\063\047\062\050\053\001\001\000\016" +
    "\041\132\042\066\044\065\045\063\047\062\050\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\042\131" +
    "\044\065\045\063\047\062\050\053\001\001\000\004\043" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\026" +
    "\140\035\072\036\071\040\070\041\067\042\066\044\065" +
    "\045\063\047\062\050\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\026\144\035\072" +
    "\036\071\040\070\041\067\042\066\044\065\045\063\047" +
    "\062\050\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\167\001\001\000\020\012\172\013\174\014\171" +
    "\015\173\017\014\020\012\021\007\001\001\000\004\003" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\177\001\001\000\002\001\001\000" +
    "\014\014\176\015\173\017\014\020\012\021\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\206\015\025\017\014\020\012\021" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\007" +
    "\215\010\022\015\025\017\014\020\012\021\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LLAPERT seccion_declaraciones_opt seccion_intrucciones_opt LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("bloque",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // seccion_declaraciones_opt ::= seccion_declaraciones FINASIG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("seccion_declaraciones_opt",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // seccion_declaraciones_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("seccion_declaraciones_opt",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // seccion_declaraciones ::= seccion_declaraciones PCOMA declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("seccion_declaraciones",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // seccion_declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("seccion_declaraciones",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= tipo_nombre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= TYPE tipo_nombre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= PROC IDEN parametros_formales bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros_formales ::= PAPERT lista_parametros_opt PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametros_formales",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_parametros_opt ::= lista_parametros 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros_opt",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_parametros_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros_opt",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_parametros ::= lista_parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametro ::= tipo ref_opt IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametro",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ref_opt ::= ASIG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ref_opt",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ref_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ref_opt",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_nombre ::= tipo IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_nombre",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= tipo0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo0 ::= tipo0 CAPERT LITENT CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo0",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo0 ::= tipo1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo0",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo1 ::= INDIR tipo1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo1",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo1 ::= tipo_base 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo1",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_base ::= STRUCT lista_campos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_base",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo_base ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_base",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo_base ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_base",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo_base ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_base",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo_base ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_base",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_base ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_base",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_campos ::= lista_campos COMA tipo_nombre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_campos",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_campos ::= tipo_nombre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_campos",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // seccion_intrucciones_opt ::= seccion_intrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("seccion_intrucciones_opt",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // seccion_intrucciones_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("seccion_intrucciones_opt",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // seccion_intrucciones ::= lista_instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("seccion_intrucciones",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_instrucciones ::= lista_instrucciones PCOMA instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= ARROBA expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= if_ins 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= if_ins else_ins 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= WHILE exp_bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= READ expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= WRITE expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= NEW expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= DELETE expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= CALL IDEN parametros_reales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // if_ins ::= IF exp_bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("if_ins",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // else_ins ::= ELSE bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("else_ins",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp_bloque ::= expresion bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("exp_bloque",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametros_reales ::= PAPERT lista_expresiones_opt PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametros_reales",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lista_expresiones_opt ::= lista_expresiones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_expresiones_opt",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // lista_expresiones_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_expresiones_opt",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // lista_expresiones ::= lista_expresiones COMA expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_expresiones",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_expresiones",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E0 ::= E1 ASIG E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E1 ::= E1 op_relacional E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E2 ::= E2 SUMA E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E2 ::= E3 RESTA E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E3 ::= E4 AND E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E3 ::= E4 OR E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E4 ::= E4 op_mult E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E5 ::= RESTA E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E5 ::= NOT E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E6 ::= E6 op_dirs 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E7 ::= expresion_basica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E7 ::= PAPERT E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion_basica ::= LITENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion_basica ::= LITREAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion_basica ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion_basica ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion_basica ::= LITCADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion_basica ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion_basica ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // op_relacional ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_relacional",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // op_relacional ::= MENORIG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_relacional",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // op_relacional ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_relacional",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // op_relacional ::= MAYORIG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_relacional",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // op_relacional ::= IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_relacional",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // op_relacional ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_relacional",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // op_mult ::= MUL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_mult",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // op_mult ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_mult",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // op_mult ::= MOD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_mult",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // op_dirs ::= CAPERT expresion CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_dirs",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // op_dirs ::= PUNTO IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_dirs",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // op_dirs ::= INDIR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_dirs",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

