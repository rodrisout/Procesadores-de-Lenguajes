options  {
  STATIC=false;
  DEBUG_PARSER=true;
}  
PARSER_BEGIN(AnalizadorSintacticoTiny)
package asint;

public class AnalizadorSintacticoTiny {
    protected void newToken(Token t) {}
}
PARSER_END(AnalizadorSintacticoTiny)

  TOKEN:{<#letra:["A"-"Z","a"-"z"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">} 
  TOKEN:{<#parteEntera:(["+","-"])? <digitoPositivo> (<digito>)* |"0">} 
  TOKEN:{<#parteDecimal: (<digito>)* <digitoPositivo> | "0">}
  TOKEN:{<#parteExponencial: ("e"|"E")<parteEntera>>}
  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  SKIP:{<"##"(~["\n"])*>}
  TOKEN:{<bool:("b"|"B")("o"|"O")("o"|"O")("l"|"L")>} 
  TOKEN:{<INT:("i"|"I")("n"|"N")("t"|"T")>}  
  TOKEN:{<real:("r"|"R")("e"|"E")("a"|"A")("l"|"L")>}
  TOKEN:{<string:("s"|"S")("t"|"T")("r"|"R")("i"|"I")("n"|"N")("g"|"G")>}
  TOKEN:{<and:("a"|"A")("n"|"N")("d"|"D")>}
  TOKEN:{<or:("o"|"O")("r"|"R")>}
  TOKEN:{<not:("n"|"N")("o"|"O")("t"|"T")>}
  TOKEN:{<TRUE:("t"|"T")("r"|"R")("u"|"U")("e"|"E")>}
  TOKEN:{<FALSE:("f"|"F")("a"|"A")("l"|"L")("s"|"S")("e"|"E")>}
  TOKEN:{<NULL:("n"|"N")("u"|"U")("l"|"L")("l"|"L")>}
  TOKEN:{<proc:("p"|"P")("r"|"R")("o"|"O")("c"|"C")>}
  TOKEN:{<IF:("i"|"I")("f"|"F")>}
  TOKEN:{<ELSE:("e"|"E")("l"|"L")("s"|"S")("e"|"E")>}
  TOKEN:{<WHILE:("w"|"W")("h"|"H")("i"|"I")("l"|"L")("e"|"E")>}
  TOKEN:{<struct:("s"|"S")("t"|"T")("r"|"R")("u"|"U")("c"|"C")("t"|"T")>}
  TOKEN:{<NEW:("n"|"N")("e"|"E")("w"|"W")>}
  TOKEN:{<delete:("d"|"D")("e"|"E")("l"|"L")("e"|"E")("t"|"T")("e"|"E")>}
  TOKEN:{<read:("r"|"R")("e"|"E")("a"|"A")("d"|"D")>}
  TOKEN:{<write:("w"|"W")("r"|"R")("i"|"I")("t"|"T")("e"|"E")>}
  TOKEN:{<nl:("n"|"N")("l"|"L")>}
  TOKEN:{<type:("t"|"T")("y"|"Y")("p"|"P")("e"|"E")>}
  TOKEN:{<call:("c"|"C")("a"|"A")("l"|"L")("l"|"L")>}
  TOKEN:{<literalEntero:<parteEntera>>}
  TOKEN:{<literalReal:<parteEntera>("."<parteDecimal>|<parteExponencial>|"."<parteDecimal><parteExponencial>)>}
  TOKEN:{<identificador:("_"|<letra>)(<letra>|<digito>|"_")*>}
  TOKEN:{<literalCadena:"\""(~["\""])*"\"">}

  TOKEN:{<suma:("+")>}
  TOKEN:{<resta:("-")>}
  TOKEN:{<mul:("*")>}
  TOKEN:{<div:("/")>}
  TOKEN:{<mod:("%")>}
  TOKEN:{<menor:("<")>}
  TOKEN:{<mayor:(">")>}
  TOKEN:{<igual:("==")>}
  TOKEN:{<distinto:("!=")>}
  TOKEN:{<menorIgual:("<=")>}
  TOKEN:{<mayorIgual:(">=")>}
  TOKEN:{<asig:("=")>}
  TOKEN:{<finalAsig:("&&")>}
  TOKEN:{<parenApert:("(")>}
  TOKEN:{<parenCierre:(")")>}
  TOKEN:{<llaveApert:("{")>}
  TOKEN:{<llaveCierre:("}")>}
  TOKEN:{<puntoComa:(";")>}
  TOKEN:{<coma:(",")>}
  TOKEN:{<punto:(".")>}
  TOKEN:{<arroba:("@")>}
  TOKEN:{<indireccion:("^")>}
  TOKEN:{<paramRef:("&")>}
  TOKEN:{<corcheteApert:("[")>}
  TOKEN:{<corcheteCierre:("]")>}
  
  void analiza()   : {} {programa() <EOF> }
  void programa()  : {} {bloque()}
  
  void bloque()  : {} {<llaveApert> seccion_declaraciones_opt() seccion_instrucciones_opt() <llaveCierre>}
  void seccion_declaraciones_opt()  : {} {seccion_declaraciones() <finalAsig> | {}}
  void seccion_declaraciones()  : {} {declaracion() resto_sd()}
  void resto_sd()  : {} {<puntoComa> declaracion() resto_sd() | {}}
  void declaracion()  : {} {tipo_nombre() | <type> tipo_nombre() | <proc> <identificador> parametros_formales() bloque()}
  void parametros_formales()  : {} {<parenApert> lista_parametros_opt() <parenCierre>}
  void lista_parametros_opt()  : {} {lista_parametros() | {}}
  void lista_parametros()  : {} {parametro() resto_lp() }
  void resto_lp()  : {} {<coma> parametro() resto_lp() | {}}
  void parametro()  : {} {tipo() ref_opt() <identificador>}  
  void ref_opt()  : {} {<paramRef> | {}}  
  
  void tipo_nombre()  : {} {tipo() <identificador>}  
  void tipo()  : {} {tipo0()}  
  void tipo0()  : {} {tipo1() resto_tipo0()}  
  void resto_tipo0()  : {} {<corcheteApert><literalEntero><corcheteCierre> resto_tipo0() | {}}  
  void tipo1()  : {} {<indireccion> tipo1() | tipo_base()}  
  void tipo_base()  : {} {<struct> <llaveApert> lista_campos() <llaveCierre> | <INT>  | <real>  | <bool>  | <string>  | <identificador> }  
  void lista_campos()  : {} {tipo_nombre() resto_lc()}  
  void resto_lc()  : {} {<coma> tipo_nombre() resto_lc() | {}}  
  
  void seccion_instrucciones_opt()  : {} {seccion_instrucciones() | {}}  
  void seccion_instrucciones()  : {} {lista_instrucciones()}  
  void lista_instrucciones()  : {} {instruccion() resto_li()}  
  void resto_li()  : {} {<puntoComa> instruccion() resto_li() | {}}  
  void instruccion()  : {} {<arroba> expresion() | if_ins() resto_ii() | <WHILE> exp_bloq() | <read> expresion()
							| <write> expresion()  | <nl> | <NEW> expresion() | <delete> expresion() 
							| <call> <identificador> parametros_reales() | bloque()}  
  void resto_ii()  : {} {else_ins() | {}}    
  void if_ins()  : {} {<IF> exp_bloq()}  
  void else_ins()  : {} {<ELSE> bloque()}  
  void exp_bloq()  : {} {expresion() bloque()}  
  void parametros_reales()  : {} {<parenApert> lista_expresiones_opt() <parenCierre>}  
  void lista_expresiones_opt()  : {} {lista_expresiones() | {}}    
  void lista_expresiones()  : {} {expresion() resto_le()}  
  void resto_le()  : {} {<coma> expresion() resto_le() | {}}  
  
  void expresion()  : {} {E0()}  
  void E0()  : {} {E1() resto_E0()}  
  void resto_E0()  : {} {<asig> E0() | {}}    
  void E1()  : {} {E2() resto_E1()}  
  void resto_E1()  : {} {op_relacional() E2() resto_E1() | {}}  
  void E2()  : {} {E3() resto_E2_F() resto_E2_R()}   
  void resto_E2_R()  : {} {<suma> E3() resto_E2_R() | {}}  
  void resto_E2_F()  : {} {<resta> E3() | {}} 
  void E3()  : {} {E4() resto_E3()}  
  void resto_E3()  : {} {<and> E3() | <or> E4() | {}}  
  void E4()  : {} {E5() resto_E4()}  
  void resto_E4()  : {} {op_mult() E5() resto_E4() | {}}  
  void E5()  : {} {<resta> E5() | <not> E5() | E6()}    
  void E6()  : {} {E7() resto_E6()}  
  void resto_E6()  : {} {op_dirs() resto_E6() | {}}  
  void E7()  : {} {expresion_basica() | <parenApert> E0() <parenCierre>}  
  void expresion_basica()  : {} {<literalEntero> | <literalReal> | <TRUE> | <FALSE>
							   | <literalCadena> | <identificador> | <NULL>}  
  
  void op_relacional()  : {} {<menor> | <menorIgual> | <mayor> | <mayorIgual> | <igual> | <distinto>}    
  void op_mult()  : {} {<mul> | <div> | <mod>}  
  void op_dirs()  : {} {<corcheteApert> expresion() <corcheteCierre> | <punto> <identificador> | <indireccion>}  