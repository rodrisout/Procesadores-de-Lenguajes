options {
	STATIC = false;
	DEBUG_PARSER = true;
}
PARSER_BEGIN(AnalizadorSintacticoTiny)
package parser;

public class AnalizadorSintacticoTiny {
	protected void newToken(Token t) {}
}
PARSER_END(AnalizadorSintacticoTiny)

  /* general definitions */
  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">}
  TOKEN:{<#parteEntera:("+"|"-")?("0"|<digitoPositivo>(<digito>)*)>}
  TOKEN:{<#parteExponencial:("E"|"e")<parteEntera>>}
  TOKEN:{<#parteDecimal:((<digito>)*<digitoPositivo>)|("0")>}
  /* ignored strings */
  SKIP:{<[" ","\t","\r","\b","\n"]>}
  SKIP:{<"##"(~["\n"])*>}
  /* language definitions */
  TOKEN:{<bool_:("b"|"B")("o"|"O")("o"|"O")("l"|"L")>}
  TOKEN:{<int_:("i"|"I")("n"|"N")("t"|"T")>}
  TOKEN:{<real_:("r"|"R")("e"|"E")("a"|"A")("l"|"L")>}
  TOKEN:{<string_:("s"|"S")("t"|"T")("r"|"R")("i"|"I")("n"|"N")("g"|"G")>}
  TOKEN:{<and_:("a"|"A")("n"|"N")("d"|"D")>}
  TOKEN:{<or_:("o"|"O")("r"|"R")>}
  TOKEN:{<not_:("n"|"N")("o"|"O")("t"|"T")>}
  TOKEN:{<true_:("t"|"T")("r"|"R")("u"|"U")("e"|"E")>}
  TOKEN:{<false_:("f"|"F")("a"|"A")("l"|"L")("s"|"S")("e"|"E")>}
  TOKEN:{<null_:("n"|"N")("u"|"U")("l"|"L")("l"|"L")>}
  TOKEN:{<proc_:("p"|"P")("r"|"R")("o"|"O")("c"|"C")>}
  TOKEN:{<if_:("i"|"I")("f"|"F")>}
  TOKEN:{<else_:("e"|"E")("l"|"L")("s"|"S")("e"|"E")>}
  TOKEN:{<while_:("w"|"W")("h"|"H")("i"|"I")("l"|"L")("e"|"E")>}
  TOKEN:{<struct_:("s"|"S")("t"|"T")("r"|"R")("u"|"U")("c"|"C")("t"|"T")>}
  TOKEN:{<new_:("n"|"N")("e"|"E")("w"|"W")>}
  TOKEN:{<delete_:("d"|"D")("e"|"E")("l"|"L")("e"|"E")("t"|"T")("e"|"E")>}
  TOKEN:{<read_:("r"|"R")("e"|"E")("a"|"A")("d"|"D")>}
  TOKEN:{<write_:("w"|"W")("r"|"R")("i"|"I")("t"|"T")("e"|"E")>}
  TOKEN:{<nl_:("n"|"N")("l"|"L")>}
  TOKEN:{<type_:("t"|"T")("y"|"Y")("p"|"P")("e"|"E")>}
  TOKEN:{<call_:("c"|"C")("a"|"A")("l"|"L")("l"|"L")>}
  
  TOKEN:{<literalEntero:<parteEntera>>}
  TOKEN:{<literalReal:<parteEntera>(("."<parteDecimal>)|(<parteExponencial>)|("."<parteDecimal><parteExponencial>))>}
  TOKEN:{<literalCadena:"\""(~["\""])*"\"">}
  TOKEN:{<identificador:("_"|<letra>)(<letra>|<digito>|"_")*>}
  TOKEN:{<suma:"+">}
  TOKEN:{<resta:"-">}
  TOKEN:{<mul:"*">}
  TOKEN:{<div:"/">}
  TOKEN:{<mod:"%">}
  TOKEN:{<menor:"<">}
  TOKEN:{<mayor:">">}
  TOKEN:{<igual:"==">}
  TOKEN:{<distinto:"!=">}
  TOKEN:{<menorIgual:"<=">}
  TOKEN:{<mayorIgual:">=">}
  TOKEN:{<asig:"=">}
  TOKEN:{<finalAsig:"&&">}
  TOKEN:{<parenApert:"(">}
  TOKEN:{<parenCierre:")">}
  TOKEN:{<llaveApert:"{">}
  TOKEN:{<llaveCierre:"}">}
  TOKEN:{<puntoComa:";">}
  TOKEN:{<coma:",">}
  TOKEN:{<punto:".">}
  TOKEN:{<arroba:"@">}
  TOKEN:{<indireccion:"^">}
  TOKEN:{<paramRef:"&">}
  TOKEN:{<corcheteApert:"[">}
  TOKEN:{<corcheteCierre:"]">}

void programa() : {} {
	bloque() <EOF> }

void bloque() : {} {
	<llaveApert> seccion_declaraciones_opt() seccion_instrucciones_opt() <llaveCierre> }

/* [= declaraciones =] */
void seccion_declaraciones_opt() : {} {
	seccion_declaraciones() <finalAsig>
	| {} }

void seccion_declaraciones() : {} {
	declaracion() resto_sd() }

void resto_sd() : {} {
	<puntoComa> declaracion() resto_sd()
	| {} }

void declaracion() : {} {
	tipo_nombre()
	| <type_> tipo_nombre()
	| <proc_> <identificador> parametros_formales() bloque() }

void parametros_formales() : {} {
	<parenApert> lista_parametros_opt() <parenCierre> }

void lista_parametros_opt() : {} {
	lista_parametros()
	| {} }

void lista_parametros() : {} {
	parametro() resto_lp() }

void resto_lp() : {} {
	<coma> parametro() resto_lp()
	| {} }

void parametro() : {} {
	tipo() ref_opt() <identificador> }

void ref_opt() : {} {
	<paramRef>	
	| {} }

/* [= tipos =] */
void tipo_nombre() : {} {
	tipo() <identificador> }

void tipo() : {} {
	tipo0() }

void tipo0() : {} {
	tipo1() resto_tipo0() }

void resto_tipo0() : {} {
	<corcheteApert> <literalEntero> <corcheteCierre> resto_tipo0()
	| {} }

void tipo1() : {} {
	<indireccion> tipo1()
	| tipo_base() }

void tipo_base() : {} {
	<int_>
	| <real_>
	| <bool_>
	| <string_>
	| <identificador>
	| <struct_> <llaveApert> lista_campos() <llaveCierre> }

void lista_campos() : {} {
	tipo_nombre() resto_lc() }

void resto_lc() : {} {
	<coma> tipo_nombre() resto_lc()
	| {} }

/* [= instrucciones =] */
void seccion_instrucciones_opt() : {} {
	seccion_instrucciones()
	| {} }

void seccion_instrucciones() : {} {
	instruccion() resto_li() }

void resto_li() : {} {
	<puntoComa> instruccion() resto_li()
	| {} }

void instruccion() : {} {
	<arroba> expresion()
	| <if_> expresion() bloque() resto_ii()
	| <while_> expresion() bloque()
	| <read_> expresion()
	| <write_> expresion()
	| <nl_>
	| <new_> expresion()
	| <delete_> expresion()
	| <call_> <identificador> <parenApert> lista_expresiones_opt() <parenCierre>
	| bloque() }
void resto_ii() : {} {
	<else_> bloque()
	| {} }
void lista_expresiones_opt() : {} {
	lista_expresiones()
	| {} }
void lista_expresiones() : {} {
	expresion() resto_le() }
void resto_le() : {} {
	<coma> expresion() resto_le()
	| {} }

/* [= expresiones =] */
void expresion() : {} {
	E0() }

void E0() : {} {
	E1() resto_E0() }
void resto_E0() : {} {
	<asig> E0()
	| {} }
void E1() : {} {
	E2() resto_E1() }
void resto_E1() : {} {
	op_relacional() E2() resto_E1()
	| {} }
void E2() : {} {
	E3() resto_E2_F() resto_E2_R() }
void resto_E2_R() : {} {
	<suma> E3() resto_E2_R()
	| {} }
void resto_E2_F() : {} {
	<resta> E3()
	| {} }
void E3() : {} {
	E4() resto_E3() }
void resto_E3() : {} {
	<and_> E3()
	| <or_> E4()
	| {} }
void E4() : {} {
	E5() resto_E4() }
void resto_E4() : {} {
	op_mult() E5() resto_E4()
	| {} }
void E5() : {} {
	<resta> E5()
	| <not_> E5()
	| E6() }
void E6() : {} {
	E7() resto_E6() }
void resto_E6() : {} {
	op_dirs() resto_E6()
	| {} }
void E7() : {} {
	expresion_basica()
	| <parenApert> E0() <parenCierre> }

void expresion_basica() : {} {
	<literalReal>
	| <literalEntero>
	| <true_>
	| <false_>
	| <literalCadena>
	| <identificador>
	| <null_> }

void op_relacional() : {} {
	<menor>
	| <menorIgual>
	| <mayor>
	| <mayorIgual>
	| <igual>
	| <distinto> }

void op_mult() : {} {
	<mul>
	| <div>
	| <mod> }

void op_dirs() : {} {
	<corcheteApert> expresion() <corcheteCierre>
	| <punto> <identificador>
	| <indireccion> }
