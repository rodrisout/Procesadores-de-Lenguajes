options {
	STATIC = false;
	DEBUG_PARSER = true;
}
PARSER_BEGIN(ASTBuilderJavacc)
package parser;

import ast.AST;

public class ASTBuilderJavacc extends AST {
	protected void newToken(Token t) {}
}
PARSER_END(ASTBuilderJavacc)

  /* general definitions */
  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">}
  TOKEN:{<#parteEntera:("+"|"-")?("0"|<digitoPositivo>(<digito>)*)>}
  TOKEN:{<#parteExponencial:("E"|"e")<parteEntera>>}
  TOKEN:{<#parteDecimal:((<digito>)*<digitoPositivo>)|("0")>}
  /* ignored strings */
  SKIP:{<[" ","\t","\r","\b","\n"]>}
  SKIP:{<"##"(~["\n"])*>}
  /* language definitions */
  TOKEN:{<bool_:("b"|"B")("o"|"O")("o"|"O")("l"|"L")>}
  TOKEN:{<int_:("i"|"I")("n"|"N")("t"|"T")>}
  TOKEN:{<real_:("r"|"R")("e"|"E")("a"|"A")("l"|"L")>}
  TOKEN:{<string_:("s"|"S")("t"|"T")("r"|"R")("i"|"I")("n"|"N")("g"|"G")>}
  TOKEN:{<and_:("a"|"A")("n"|"N")("d"|"D")>}
  TOKEN:{<or_:("o"|"O")("r"|"R")>}
  TOKEN:{<not_:("n"|"N")("o"|"O")("t"|"T")>}
  TOKEN:{<true_:("t"|"T")("r"|"R")("u"|"U")("e"|"E")>}
  TOKEN:{<false_:("f"|"F")("a"|"A")("l"|"L")("s"|"S")("e"|"E")>}
  TOKEN:{<null_:("n"|"N")("u"|"U")("l"|"L")("l"|"L")>}
  TOKEN:{<proc_:("p"|"P")("r"|"R")("o"|"O")("c"|"C")>}
  TOKEN:{<if_:("i"|"I")("f"|"F")>}
  TOKEN:{<else_:("e"|"E")("l"|"L")("s"|"S")("e"|"E")>}
  TOKEN:{<while_:("w"|"W")("h"|"H")("i"|"I")("l"|"L")("e"|"E")>}
  TOKEN:{<struct_:("s"|"S")("t"|"T")("r"|"R")("u"|"U")("c"|"C")("t"|"T")>}
  TOKEN:{<new_:("n"|"N")("e"|"E")("w"|"W")>}
  TOKEN:{<delete_:("d"|"D")("e"|"E")("l"|"L")("e"|"E")("t"|"T")("e"|"E")>}
  TOKEN:{<read_:("r"|"R")("e"|"E")("a"|"A")("d"|"D")>}
  TOKEN:{<write_:("w"|"W")("r"|"R")("i"|"I")("t"|"T")("e"|"E")>}
  TOKEN:{<nl_:("n"|"N")("l"|"L")>}
  TOKEN:{<type_:("t"|"T")("y"|"Y")("p"|"P")("e"|"E")>}
  TOKEN:{<call_:("c"|"C")("a"|"A")("l"|"L")("l"|"L")>}
  
  TOKEN:{<literalEntero:<parteEntera>>}
  TOKEN:{<literalReal:<parteEntera>(("."<parteDecimal>)|(<parteExponencial>)|("."<parteDecimal><parteExponencial>))>}
  TOKEN:{<literalCadena:"\""(~["\""])*"\"">}
  TOKEN:{<identificador:("_"|<letra>)(<letra>|<digito>|"_")*>}
  TOKEN:{<suma:"+">}
  TOKEN:{<resta:"-">}
  TOKEN:{<mul:"*">}
  TOKEN:{<div:"/">}
  TOKEN:{<mod:"%">}
  TOKEN:{<menor:"<">}
  TOKEN:{<mayor:">">}
  TOKEN:{<igual:"==">}
  TOKEN:{<distinto:"!=">}
  TOKEN:{<menorIgual:"<=">}
  TOKEN:{<mayorIgual:">=">}
  TOKEN:{<asig:"=">}
  TOKEN:{<finalAsig:"&&">}
  TOKEN:{<parenApert:"(">}
  TOKEN:{<parenCierre:")">}
  TOKEN:{<llaveApert:"{">}
  TOKEN:{<llaveCierre:"}">}
  TOKEN:{<puntoComa:";">}
  TOKEN:{<coma:",">}
  TOKEN:{<punto:".">}
  TOKEN:{<arroba:"@">}
  TOKEN:{<indireccion:"^">}
  TOKEN:{<paramRef:"&">}
  TOKEN:{<corcheteApert:"[">}
  TOKEN:{<corcheteCierre:"]">}

Prog programa() : { Bloq b; } {
	b = bloque() <EOF> { return b; }
}

Bloq bloque() : { LDec sd; SeccionInstrucciones si; } {
	<llaveApert> sd = seccion_declaraciones_opt() si = seccion_instrucciones_opt() <llaveCierre>
	{ return new Bloq(sd, si); }
}

/* [= declaraciones =] */
LDec seccion_declaraciones_opt() : { LDec ld; } {
	ld = seccion_declaraciones() <finalAsig> { return ld; }
	| { return null; }
}

LDec seccion_declaraciones() : { Dec d; LDec ld; } {
	d = declaracion() ld = resto_sd(new LDec(null, d)) { return ld; }
}

LDec resto_sd(LDec ld0) : { Dec d; LDec ld; } {
	<puntoComa> d = declaracion() ld = resto_sd(new LDec(ld0, d)) { return ld; }
	| { return LDec(ld0, d); }
}

Dec declaracion() : { Tipo t; Token i; ParametrosFormales p; Bloq b; } {
	t = tipo() i = <identificador> { return new DecVar(t, i.image); }
	| <type_> t = tipo() i = <identificador> { return new DecTipo(t, i.image); }
	| <proc_> i = <identificador> p = lista_parametros_opt() b = bloque()
	  { return new DecProc(i.image, p, b); }
}

LParamF lista_parametros_opt() : { LParamF l; } {
	l = lista_parametros() { return l; }
	| { return null; } }

LParamF lista_parametros() : { ParamF a; LParamF la; } {
	a = parametro() la = resto_lp(new LParamF(null, a)) { return la; }
}

LParamF resto_lp(LParamF l0) : { ParamF a; LParamF la; } {
	<coma> a = parametro() la = resto_lp(new LParamF(l0, a)) { return la; }
	| { return l0; }
}

ParamF parametro() : { Tipo t; boolean r; Token i; } {
	t = tipo()
	r = ref_opt()
	i = <identificador>
	{ return new ParamF(t, r, i.image)}
}

boolean ref_opt() : {} {
	<paramRef>	{ return true; }
	| { return false; }
}

/* [= tipos =] */
Tipo tipo() : { Tipo t; } {
	t = tipo0() { return t; }
}

Tipo tipo0() : { Tipo t0, t1; } {
	t0 = tipo1() t1 = resto_tipo0(t0) { return t1; }
}

Tipo resto_tipo0(Tipo t0) : { Token i; Tipo t; } {
	<corcheteApert> i = <literalEntero> <corcheteCierre>
	t = resto_tipo0(new TipoArray(t0, Integer.toString(i.image)))
	{ return t; }
	| { return t0; }
}

Tipo tipo1() : { Tipo t; } {
	<indireccion> t = tipo1() { return new TipoIndir(t); }
	| t = tipo_base() { return t; }
}

Tipo tipo_base() : { Token i; ListaCampos l; } {
	<int_> { return new TipoBasico(INT); }
	| <real_> { return new TipoBasico(REAL); }
	| <bool_> { return new TipoBasico(BOOL); }
	| <string_> { return new TipoBasico(STRING); }
	| i = <identificador> { return new TipoIdent(i.image); }
	| <struct_> <llaveApert> l = lista_campos() <llaveCierre> { return new TipoStruct(l); }
}

LCampo lista_campos() : { Campo c; LCampo lc; } {
	c = campo() lc = resto_lc(new LCampo(null, c)) { return lc; }
}

void resto_lc(LCampo lc0) : { Campo c; LCampo lc; } {
	<coma> c = campo() lc = resto_lc(new LCampo(lc0, c)) { return lc; }
	| { return lc0; }
}

Campo campo() : { Tipo t; Token i; } {
	t = tipo() i = <identificador> { return new Campo(t, i.image); }
}

/* [= instrucciones =] */
SeccionInstrucciones seccion_instrucciones_opt() : { LIns li; } {
	li = seccion_instrucciones()
	{ return li; }
	| { return null; }
}

SeccionInstrucciones seccion_instrucciones() : { Ins i; LIns li; } {
	i = instruccion() li = resto_li(new LIns(null, i)) { return li; }
}

.SeccionInstrucciones resto_li(LIns li0) : { Ins i; Lins li; } {
	<puntoComa> i = instruccion() li = resto_li(new LIns(li0, i)) { return li; }
	| { return li0; }
}

Instruccion instruccion() : { Exp e; Bloq b0, b1; } {
	<arroba> e = expresion() { return e; }
	| <if_> e = expresion() b0 = bloque() b1 = resto_ii() { return new InsIfElse(e, b0, b1); }
	| <while_> e = expresion() b0 = bloque() { return new InsWhile(e, b0); }
	| <read_> e = expresion() { return new InsBuiltin(READ, e); }
	| <write_> e = expresion() { return new InsBuiltin(WRITE, e); }
	| <nl_> { return new InsBuiltin(NL, NULL); }
	| <new_> e = expresion() { return new InsBuiltin(NEW, e); }
	| <delete_> e = expresion() { return new InsBuiltin(DELETE, e); }
	| <call_> i = <identificador> <parenApert> le = lista_expresiones_opt() <parenCierre> { return new InsCall(i.image, le); }
	| b0 = bloque() { return InsBloq(b0); }
}
Bloq resto_ii() : { Bloq b; } {
	<else_> b = bloque() { return b; }
	| { return null; }
}
LParamR lista_expresiones_opt() : { LParamR lp; } {
	lp = lista_expresiones() { return lp; }
	| { return null; }
}
LParamR lista_expresiones(LParamR lp) : { Exp e; LParamR lp; } {
	e = expresion() lp = resto_le(new LParamR(null, e)) { return lp; }
	{ return l; }
}
LParamR resto_le(LParamR lp0) : { Exp e; LParamR lp; } {
	<coma> e = expresion() lp = resto_le(new LParamR(lp0, e)) { return lp; }
	| { return lp0; }
}

/* [= expresiones =] */
Exp expresion() : { Exp e; } {
	e = E0() { return e; }
}
Exp E0() : { Exp e0, e1; } {
	e0 = E1() e1 = resto_E0(e0) { return e1; }
}
Exp resto_E0(Exp e0) : { Exp e1; } {
	<asig> e1 = E0() { return ExpBin(e0, ASIG, e1); }
	| { return t0; }
}
Exp E1() : { Exp t0, t1; } {
	e0 = E2() e1 = resto_E1(e0) { return e1; }
}
Exp resto_E1(Exp e0) : { TExpBin et; Exp e1, e2; } {
	et = op_relacional() e1 = E2() e2 = resto_E1(new ExpBin(e0, et, e1)) { return e2; }
	| { return e0; }
}
Exp E2() : { Exp e0, e1, e2; } {
	e0 = E3() e1 = resto_E2_F(e0) e2 = resto_E2_R(e1) { return e2; }
}
Exp resto_E2_R(Exp e0) : { Exp e1, e2; } {
	<suma> e1 = E3() e2 = resto_E2_R(new ExpBin(e0, SUMA, e1)) { return e2; }
	| { return e0; }
}
Exp resto_E2_F(Exp e0) : { Exp e1; } {
	<resta> e1 = E3() { return new ExpBin(e0, RESTA, e1); }
	| { return e0; }
}
Exp E3() : { Exp e0, e1; } {
	e0 = E4() e1 = resto_E3(e0) { return e1;}
}
Exp resto_E3(Exp e0) : { Exp e1; } {
	<and_> e1 = E3() { return new ExpBin(e0, AND, e1); }
	| <or_> e1 = E4() { return new ExpBin(e0, OR, e1); }
	| { return e0; }
}
Exp E4() : { Exp e0; } {
	e0 = E5() e1 = resto_E4(e0) { return e1; }
}
Exp resto_E4(Exp e0) : { TExpBin et; Exp e1, e2; } {
	et = op_mult() e1 = E5() e2 = resto_E4(new ExpBin(e0, et, e1)) { return e2; }
	| { return e0; }
}
Exp E5() : { Exp e0; } {
	<resta> e0 = E5() { return ExpNeg(e0); }
	| <not_> e0 = E5() { return ExpNot(e0); }
	| e0 = E6() { return e0; }
}
Exp E6() : { Exp e0, e1; } {
	e0 = E7() e1 = resto_E6(e0) { return e1; }
}
Exp resto_E6(Exp e0) : { ExpIndireccion.Modo m; Exp e1; } {
	m = op_dirs() e1 = resto_E6(new ExpIndirect(e0, m)) { return e1; }
	| { return e0; }
}
Exp E7() : {Exp e; } {
	e = expresion_basica() { return e; }
	| <parenApert> e = E0() <parenCierre> { return e; }
}

Exp expresion_basica() : { Token i; } {
	<true_> { return new ExpBasicaUni(TExpBasicaUni.TRUE); }
	| <false_> { return new ExpBasicaUni(TExpBasicaUni.FALSE); }
	| <null_> { return new ExpBasicaUni(TExpBasicaUni.NULL); }
	| i = <literalReal> { return new ExpBasicaV<Float>(Float.parseFloat(i.image)); }
	| i = <literalEntero> { return new ExpBasicaV<Integer>(Integer.parseInt(i.image)); }
	| i = <literalCadena> { return new ExpBasicaV<String>(i.image); }
	| i = <identificador> { return new ExpBasicaIdent(i.image); }
}

TExpBin op_relacional() : {} {
	<menor> { return TExpBin.MENOR; }
	| <menorIgual> { return TExpBin.MENOR_IGUAL; }
	| <mayor> { return TExpBin.MAYOR; }
	| <mayorIgual> { return TExpBin.MAYOR_IGUAL; }
	| <igual> { return TExpBin.IGUAL; }
	| <distinto> { return TExpBin.DISTINTO; }
}

TExpBin op_mult() : {} {
	<mul> { return TExpBin.MUL; }
	| <div> { return TExpBin.DIV; }
	| <mod> { return TExpBin.MOD; }
}

ExpIndireccion.Modo op_dirs() : { Exp e; Token i; } {
	<corcheteApert> e = expresion() <corcheteCierre> { return new ExpIndireccion.Index(e); }
	| <punto> i = <identificador> { return new ExpIndireccion.Campo(i.image); }
	| <indireccion> { return new ExpIndireccion.Deref(); }
}
