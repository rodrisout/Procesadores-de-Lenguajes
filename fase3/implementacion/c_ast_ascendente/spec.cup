package c_ast_ascendente;

import java_cup.runtime.*;
import asint.ClaseSemanticaTiny;
import errors.GestionErroresTiny;
import asint.SintaxisAbstractaTiny.Bloq;
import asint.SintaxisAbstractaTiny.SecDecs;
import asint.SintaxisAbstractaTiny.LDecs;
import asint.SintaxisAbstractaTiny.Dec;
import asint.SintaxisAbstractaTiny.SecIs;
import asint.SintaxisAbstractaTiny.LIs;
import asint.SintaxisAbstractaTiny.I;
import asint.SintaxisAbstractaTiny.ParamFs;
import asint.SintaxisAbstractaTiny.LParamFs;
import asint.SintaxisAbstractaTiny.ParamF;
import asint.SintaxisAbstractaTiny.ParamRs;
import asint.SintaxisAbstractaTiny.LParamRs;
import asint.SintaxisAbstractaTiny.LCampos;
import asint.SintaxisAbstractaTiny.TipoNom;
import asint.SintaxisAbstractaTiny.Tipo;
import asint.SintaxisAbstractaTiny.Exp;
import c_ast_ascendente.UnidadLexica.StringLocalizado;


scan with {: 
  return getScanner().next_token(); 
:};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};
action code {:
  ClaseSemanticaTiny sem = new ClaseSemanticaTiny();
:}

terminal     BOOL, INT, REAL, STRING, PROC, IF, ELSE, WHILE, STRUCT, NEW, DELETE, READ, 
			 WRITE, NL, TYPE, CALL, FINALASIG, 
			 PAPERT, PCIERRE, LLAPERT, LLCIERRE, PCOMA, COMA, PUNTO, ARROBA, 
			 PARAMREF, CCIERRE;

terminal StringLocalizado LITENT, LITREAL, LITCADENA, IDEN,
							AND, OR, NOT, TRUE, FALSE, NULL,
							SUMA, RESTA, MUL, DIV, MOD, MENOR,
							MAYOR, IGUAL, DISTINTO, MENORIG, 
							MAYORIG, ASIG, INDIR, CAPERT;

non terminal Bloq bloque;
non terminal SecDecs seccion_declaraciones_opt;
non terminal LDecs seccion_declaraciones;
non terminal Dec declaracion;
non terminal SecIs seccion_instrucciones_opt;
non terminal LIs seccion_instrucciones, lista_instrucciones;
non terminal I instruccion, if_ins, else_ins; 
non terminal ParamFs parametros_formales, lista_parametros_opt;
non terminal LParamFs lista_parametros;
non terminal ParamF parametro;
non terminal ParamRs parametros_reales, lista_expresiones_opt;
non terminal LParamRs lista_expresiones;
non terminal LCampos lista_campos;
non terminal TipoNom tipo_nombre;
non terminal Tipo tipo, tipo0, tipo1, tipo_base;
non terminal Exp expresion, E0, E1, E2, E3, E4, E5, E6, E7, expresion_basica;
non terminal StringLocalizado op_relacional, op_mult;

bloque ::= LLAPERT seccion_declaraciones_opt: secdecs seccion_instrucciones_opt: secis LLCIERRE
	{: RESULT = sem.bloq(secdecs, secis); :};
	
seccion_declaraciones_opt ::= seccion_declaraciones: decs FINALASIG
   {: RESULT = sem.si_decs(decs); :};
seccion_declaraciones_opt ::= 
   {: RESULT = sem.no_decs(); :};

seccion_declaraciones ::= seccion_declaraciones: decs PCOMA declaracion: dec
   {: RESULT = sem.muchas_decs(decs,dec);:};
seccion_declaraciones ::= declaracion: dec
   {: RESULT = sem.una_dec(dec);:};

declaracion ::= tipo_nombre: tip
   {: RESULT = sem.dec_base(tip); :};
declaracion ::= TYPE tipo_nombre: tip
   {: RESULT = sem.dec_type(tip); :};
declaracion ::= PROC IDEN: id parametros_formales: paramf bloque: bloq
   {: RESULT = (Dec)sem.dec_proc(id.str(), paramf, bloq).ponFila(id.fila()).ponCol(id.col()); :};

parametros_formales ::= PAPERT lista_parametros_opt: lparamf PCIERRE
   {: RESULT = lparamf; :};

lista_parametros_opt ::= lista_parametros: lparamf
   {: RESULT = sem.si_params_f(lparamf); :};
lista_parametros_opt ::= 
   {: RESULT = sem.no_params_f(); :};

lista_parametros ::= lista_parametros: lparamf COMA parametro: paramf
   {: RESULT = sem.muchos_params_f(lparamf, paramf);:};
lista_parametros ::= parametro: paramf
   {: RESULT = sem.un_param_f(paramf);:};
   
parametro ::= tipo: tip PARAMREF IDEN: id
	{: RESULT = (ParamF)sem.si_refparam_f(tip, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
parametro ::= tipo: tip IDEN: id
	{: RESULT = (ParamF)sem.no_refparam_f(tip, id.str()).ponFila(id.fila()).ponCol(id.col()); :};

tipo_nombre ::= tipo: tip IDEN: id
   {: RESULT = (TipoNom)sem.tipo_nombre(tip, id.str()).ponFila(id.fila()).ponCol(id.col());:};

tipo ::= tipo0: tip
   {: RESULT = tip; :};

tipo0 ::= tipo0: tip CAPERT LITENT: lit CCIERRE
   {: RESULT = (Tipo)sem.tipo_array(tip, lit.str()).ponFila(lit.fila()).ponCol(lit.col()); :};
tipo0 ::= tipo1: tip
   {: RESULT = tip; :};

tipo1 ::= INDIR tipo1: tip
   {: RESULT = sem.tipo_indir(tip); :};
tipo1 ::= tipo_base: tip
   {: RESULT = tip; :};

tipo_base ::= STRUCT LLAPERT lista_campos: lcampos LLCIERRE
   {: RESULT = sem.tipo_struct(lcampos); :};
tipo_base ::= INT
   {: RESULT = sem.tipo_int(); :};
tipo_base ::= REAL
   {: RESULT = sem.tipo_real(); :};
tipo_base ::= BOOL
   {: RESULT = sem.tipo_bool(); :};
tipo_base ::= STRING
   {: RESULT = sem.tipo_string(); :};
tipo_base ::= IDEN: id
   {: RESULT = (Tipo)sem.tipo_type(id.str()).ponFila(id.fila()).ponCol(id.col()); :};

lista_campos ::= lista_campos: lcampos COMA tipo_nombre: tip
   {: RESULT = sem.muchos_campos(lcampos, tip); :};
lista_campos ::= tipo_nombre: tip
   {: RESULT = sem.un_campo(tip); :};

seccion_instrucciones_opt ::= seccion_instrucciones: secis
   {: RESULT = sem.si_ins(secis); :};
seccion_instrucciones_opt ::= 
   {: RESULT = sem.no_ins(); :};

seccion_instrucciones ::= lista_instrucciones: lis
   {: RESULT = lis; :};

lista_instrucciones ::= lista_instrucciones: lis PCOMA instruccion: i
   {: RESULT = sem.muchas_ins(lis, i); :};
lista_instrucciones ::= instruccion: i
   {: RESULT = sem.una_ins(i); :};

instruccion ::= ARROBA expresion: e
   {: RESULT = sem.ins_eval(e); :};
instruccion ::= if_ins: ifi
   {: RESULT = ifi; :};
instruccion ::= if_ins: ifi ELSE bloque: bloq
   {: RESULT = sem.ins_if_else(ifi, bloq); :};
instruccion ::= WHILE expresion: e bloque: bloq
   {: RESULT = sem.ins_while(e, bloq); :};
instruccion ::= READ expresion: e
   {: RESULT = sem.ins_read(e); :};
instruccion ::= WRITE expresion: e
   {: RESULT = sem.ins_write(e); :};
instruccion ::= NL
   {: RESULT = sem.ins_nl(); :};
instruccion ::= NEW expresion: e
   {: RESULT = sem.ins_new(e); :};
instruccion ::= DELETE expresion: e
   {: RESULT = sem.ins_delete(e); :};
instruccion ::= CALL IDEN:id parametros_reales: p
   {: RESULT = (I)sem.ins_call(id.str(), p).ponFila(id.fila()).ponCol(id.col()); :};
instruccion ::= bloque: bloq
   {: RESULT = sem.ins_bloque(bloq); :};
if_ins ::= IF expresion: e bloque: bloq
   {: RESULT = sem.ins_if(e, bloq); :};

parametros_reales ::= PAPERT lista_expresiones_opt: lexp PCIERRE
   {: RESULT = lexp; :};

lista_expresiones_opt ::= lista_expresiones: lexp
   {: RESULT = sem.si_params_r(lexp); :};
lista_expresiones_opt ::= 
   {: RESULT = sem.no_params_r(); :};

lista_expresiones ::= lista_expresiones: lexp COMA expresion: e
   {: RESULT = sem.muchos_params_r(lexp, e); :};
lista_expresiones ::= expresion: e
   {: RESULT = sem.un_param_r(e); :};

expresion ::= E0: e
   {: RESULT = e; :};

E0 ::= E1: o1 ASIG: op E0: o2
   {: RESULT = (Exp)sem.mkopbin(op.str(), o1, o2).ponFila(op.fila()).ponCol(op.col()); :};
E0 ::= E1: e
   {: RESULT = e; :};
   
E1 ::= E1: o1 op_relacional: op E2: o2
   {: RESULT = (Exp)sem.mkopbin(op.str(), o1, o2).ponFila(op.fila()).ponCol(op.col()); :};
E1 ::= E2: e
   {: RESULT = e; :};
   
E2 ::= E2: o1 SUMA: op E3: o2
   {: RESULT = (Exp)sem.mkopbin(op.str(), o1, o2).ponFila(op.fila()).ponCol(op.col()); :};
E2 ::= E3: o1 RESTA: op E3: o2
   {: RESULT = (Exp)sem.mkopbin(op.str(), o1, o2).ponFila(op.fila()).ponCol(op.col()); :};
E2 ::= E3: e
   {: RESULT = e; :};

E3 ::= E4: o1 AND: op E3: o2
   {: RESULT = (Exp)sem.exp_and(o1, o2).ponFila(op.fila()).ponCol(op.col()); :};
E3 ::= E4: o1 OR: op E4: o2
   {: RESULT = (Exp)sem.exp_or(o1, o2).ponFila(op.fila()).ponCol(op.col()); :};
E3 ::= E4: e
   {: RESULT = e; :};

E4 ::= E4: o1 op_mult: op E5: o2
   {: RESULT = (Exp)sem.mkopbin(op.str(), o1, o2).ponFila(op.fila()).ponCol(op.col()); :};
E4 ::= E5: e
   {: RESULT = e; :};

E5 ::= RESTA: op E5: o
   {: RESULT = (Exp)sem.exp_menos(o).ponFila(op.fila()).ponCol(op.col()); :};
E5 ::= NOT: op E5: o
   {: RESULT = (Exp)sem.exp_not(o).ponFila(op.fila()).ponCol(op.col()); :};
E5 ::= E6: e
   {: RESULT = e; :};

E6 ::= E6: o CAPERT: c expresion: e CCIERRE
   {: RESULT = (Exp)sem.exp_index(o, e).ponFila(c.fila()).ponCol(c.col()); :};
E6 ::= E6: o PUNTO IDEN: id
   {: RESULT = (Exp)sem.exp_reg(o, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
E6 ::= E6: o INDIR: op
   {: RESULT = (Exp)sem.exp_indir(o).ponFila(op.fila()).ponCol(op.col()); :};
   
E6 ::= E7: e
   {: RESULT = e; :};

E7 ::= expresion_basica: e
   {: RESULT = e; :};
E7 ::= PAPERT E0: e PCIERRE
   {: RESULT = e; :};

expresion_basica ::= TRUE: e
   {: RESULT = (Exp)sem.exp_true().ponFila(e.fila()).ponCol(e.col()); :};
expresion_basica ::= FALSE: e
   {: RESULT = (Exp)sem.exp_false().ponFila(e.fila()).ponCol(e.col()); :};
expresion_basica ::= LITENT: e
   {: RESULT = (Exp)sem.exp_entero(e.str()).ponFila(e.fila()).ponCol(e.col()); :};
expresion_basica ::= LITREAL: e
   {: RESULT = (Exp)sem.exp_real(e.str()).ponFila(e.fila()).ponCol(e.col()); :};
expresion_basica ::= LITCADENA: e
   {: RESULT = (Exp)sem.exp_cadena(e.str()).ponFila(e.fila()).ponCol(e.col()); :};
expresion_basica ::= IDEN: e
   {: RESULT = (Exp)sem.exp_iden(e.str()).ponFila(e.fila()).ponCol(e.col()); :};
expresion_basica ::= NULL: e
   {: RESULT = (Exp)sem.exp_null().ponFila(e.fila()).ponCol(e.col()); :};


op_relacional ::= MENOR: o
   {: RESULT = o; :};
op_relacional ::= MENORIG: o
   {: RESULT = o; :};
op_relacional ::= MAYOR: o
   {: RESULT = o; :};
op_relacional ::= MAYORIG: o
   {: RESULT = o; :};
op_relacional ::= IGUAL: o
   {: RESULT = o; :};
op_relacional ::= DISTINTO: o
   {: RESULT = o; :};
   
op_mult ::= MUL: o
   {: RESULT = o; :};
op_mult ::= DIV: o
   {: RESULT = o; :};
op_mult ::= MOD: o
   {: RESULT = o; :};
