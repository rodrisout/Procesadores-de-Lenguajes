
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Mar 23 18:04:11 CET 2025
//----------------------------------------------------

package c_ast_ascendente;

import java_cup.runtime.*;
import asint.ClaseSemanticaTiny;
import errors.GestionErroresTiny;
import asint.SintaxisAbstractaTiny.Bloq;
import asint.SintaxisAbstractaTiny.SecDecs;
import asint.SintaxisAbstractaTiny.LDecs;
import asint.SintaxisAbstractaTiny.Dec;
import asint.SintaxisAbstractaTiny.SecIs;
import asint.SintaxisAbstractaTiny.LIs;
import asint.SintaxisAbstractaTiny.I;
import asint.SintaxisAbstractaTiny.ParamFs;
import asint.SintaxisAbstractaTiny.LParamFs;
import asint.SintaxisAbstractaTiny.ParamF;
import asint.SintaxisAbstractaTiny.ParamRs;
import asint.SintaxisAbstractaTiny.LParamRs;
import asint.SintaxisAbstractaTiny.LCampos;
import asint.SintaxisAbstractaTiny.TipoNom;
import asint.SintaxisAbstractaTiny.Tipo;
import asint.SintaxisAbstractaTiny.Exp;
import c_ast_ascendente.UnidadLexica.StringLocalizado;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Mar 23 18:04:11 CET 2025
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\005\000\002\004\003" +
    "\000\002\005\003\000\002\005\004\000\002\005\006\000" +
    "\002\014\005\000\002\015\003\000\002\015\002\000\002" +
    "\016\005\000\002\016\003\000\002\017\005\000\002\017" +
    "\004\000\002\024\004\000\002\025\003\000\002\026\006" +
    "\000\002\026\003\000\002\027\004\000\002\027\003\000" +
    "\002\030\006\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\023" +
    "\005\000\002\023\003\000\002\006\003\000\002\006\002" +
    "\000\002\007\003\000\002\010\005\000\002\010\003\000" +
    "\002\011\004\000\002\011\003\000\002\011\005\000\002" +
    "\011\005\000\002\011\004\000\002\011\004\000\002\011" +
    "\003\000\002\011\004\000\002\011\004\000\002\011\005" +
    "\000\002\011\003\000\002\012\005\000\002\020\005\000" +
    "\002\021\003\000\002\021\002\000\002\022\005\000\002" +
    "\022\003\000\002\031\003\000\002\032\005\000\002\032" +
    "\003\000\002\033\005\000\002\033\003\000\002\034\005" +
    "\000\002\034\005\000\002\034\003\000\002\035\005\000" +
    "\002\035\005\000\002\035\003\000\002\036\005\000\002" +
    "\036\003\000\002\037\004\000\002\037\004\000\002\037" +
    "\003\000\002\040\006\000\002\040\005\000\002\040\004" +
    "\000\002\040\003\000\002\041\003\000\002\041\005\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\027\004\001\002\000\052\004\014\005" +
    "\011\006\025\007\020\010\021\011\ufffe\013\ufffe\014\017" +
    "\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\022\023" +
    "\ufffe\027\ufffe\030\ufffe\034\ufffe\042\016\065\013\001\002" +
    "\000\004\002\006\001\002\000\004\002\000\001\002\000" +
    "\006\024\215\031\214\001\002\000\010\035\uffec\042\uffec" +
    "\066\uffec\001\002\000\010\035\uffea\042\uffea\066\uffea\001" +
    "\002\000\010\035\uffee\042\uffee\066\uffee\001\002\000\020" +
    "\004\014\005\011\006\025\007\020\014\017\042\016\065" +
    "\013\001\002\000\010\035\uffe8\042\uffe8\066\uffe8\001\002" +
    "\000\010\035\ufff0\042\ufff0\066\210\001\002\000\010\035" +
    "\uffe6\042\uffe6\066\uffe6\001\002\000\004\027\202\001\002" +
    "\000\010\035\uffe7\042\uffe7\066\uffe7\001\002\000\004\042" +
    "\164\001\002\000\020\004\014\005\011\006\025\007\020" +
    "\014\017\042\016\065\013\001\002\000\006\024\ufffc\031" +
    "\ufffc\001\002\000\006\024\ufffb\031\ufffb\001\002\000\010" +
    "\035\uffe9\042\uffe9\066\uffe9\001\002\000\004\042\162\001" +
    "\002\000\030\011\040\013\031\015\033\016\043\017\030" +
    "\020\044\021\041\023\045\027\004\030\uffe2\034\042\001" +
    "\002\000\026\025\100\037\075\040\055\041\056\042\062" +
    "\045\060\046\064\047\076\050\077\052\101\001\002\000" +
    "\026\025\100\037\075\040\055\041\056\042\062\045\060" +
    "\046\064\047\076\050\077\052\101\001\002\000\010\012" +
    "\155\030\uffdd\031\uffdd\001\002\000\026\025\100\037\075" +
    "\040\055\041\056\042\062\045\060\046\064\047\076\050" +
    "\077\052\101\001\002\000\006\030\uffd4\031\uffd4\001\002" +
    "\000\004\030\uffe3\001\002\000\004\030\153\001\002\000" +
    "\006\030\uffdf\031\uffdf\001\002\000\026\025\100\037\075" +
    "\040\055\041\056\042\062\045\060\046\064\047\076\050" +
    "\077\052\101\001\002\000\006\030\uffd8\031\uffd8\001\002" +
    "\000\026\025\100\037\075\040\055\041\056\042\062\045" +
    "\060\046\064\047\076\050\077\052\101\001\002\000\026" +
    "\025\100\037\075\040\055\041\056\042\062\045\060\046" +
    "\064\047\076\050\077\052\101\001\002\000\026\025\100" +
    "\037\075\040\055\041\056\042\062\045\060\046\064\047" +
    "\076\050\077\052\101\001\002\000\004\042\051\001\002" +
    "\000\006\030\uffe1\031\047\001\002\000\026\011\040\013" +
    "\031\015\033\016\043\017\030\020\044\021\041\023\045" +
    "\027\004\034\042\001\002\000\006\030\uffe0\031\uffe0\001" +
    "\002\000\004\025\053\001\002\000\006\030\uffd5\031\uffd5" +
    "\001\002\000\030\025\100\026\uffd0\037\075\040\055\041" +
    "\056\042\062\045\060\046\064\047\076\050\077\052\101" +
    "\001\002\000\060\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\036\uffb9\043\uffb9\044\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\001\002" +
    "\000\060\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033" +
    "\uffb4\036\uffb4\043\uffb4\044\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\001\002\000\060" +
    "\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\036" +
    "\uffb3\043\uffb3\044\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3" +
    "\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\064\uffb3\065\uffb3\066\uffb3\001\002\000\006\026\uffce" +
    "\032\uffce\001\002\000\026\025\100\037\075\040\055\041" +
    "\056\042\062\045\060\046\064\047\076\050\077\052\101" +
    "\001\002\000\006\026\uffd1\032\143\001\002\000\060\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\036\uffb2" +
    "\043\uffb2\044\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2" +
    "\064\uffb2\065\uffb2\066\uffb2\001\002\000\060\026\uffba\027" +
    "\uffba\030\uffba\031\uffba\032\uffba\033\uffba\036\uffba\043\uffba" +
    "\044\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056" +
    "\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba" +
    "\065\uffba\066\uffba\001\002\000\060\026\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\032\uffb7\033\uffb7\036\uffb7\043\uffb7\044\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057" +
    "\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7" +
    "\066\uffb7\001\002\000\060\026\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\033\135\036\uffbe\043\uffbe\044\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\136\066\137" +
    "\001\002\000\052\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\036\uffc1\043\uffc1\044\uffc1\051\uffc1\052\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062" +
    "\uffc1\063\uffc1\064\uffc1\001\002\000\052\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\036\uffc3\043\126\044\131\051" +
    "\uffc3\052\uffc3\053\127\054\130\055\125\056\uffc3\057\uffc3" +
    "\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\001\002\000" +
    "\040\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\036\uffc6" +
    "\051\uffc6\052\122\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062" +
    "\uffc6\063\uffc6\064\uffc6\001\002\000\036\026\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\036\uffc9\051\120\056\uffc9\057" +
    "\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\001\002" +
    "\000\034\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\036" +
    "\uffcb\056\111\057\112\060\106\061\110\062\107\063\114" +
    "\064\115\001\002\000\016\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\036\uffcd\001\002\000\004\026\105\001\002" +
    "\000\060\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\036\uffb5\043\uffb5\044\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062" +
    "\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\001\002\000\060" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\036" +
    "\uffb6\043\uffb6\044\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6" +
    "\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063" +
    "\uffb6\064\uffb6\065\uffb6\066\uffb6\001\002\000\060\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\036\uffb1\043" +
    "\uffb1\044\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064" +
    "\uffb1\065\uffb1\066\uffb1\001\002\000\026\025\100\037\075" +
    "\040\055\041\056\042\062\045\060\046\064\047\076\050" +
    "\077\052\101\001\002\000\026\025\100\037\075\040\055" +
    "\041\056\042\062\045\060\046\064\047\076\050\077\052" +
    "\101\001\002\000\052\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\036\uffc0\043\uffc0\044\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\063\uffc0\064\uffc0\001\002\000\004\026\104\001" +
    "\002\000\060\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\036\uffb8\043\uffb8\044\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8" +
    "\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\001\002\000" +
    "\006\030\uffd2\031\uffd2\001\002\000\026\025\uffac\037\uffac" +
    "\040\uffac\041\uffac\042\uffac\045\uffac\046\uffac\047\uffac\050" +
    "\uffac\052\uffac\001\002\000\026\025\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\052" +
    "\uffaf\001\002\000\026\025\uffab\037\uffab\040\uffab\041\uffab" +
    "\042\uffab\045\uffab\046\uffab\047\uffab\050\uffab\052\uffab\001" +
    "\002\000\026\025\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\050\uffb0\052\uffb0\001\002\000" +
    "\026\025\uffae\037\uffae\040\uffae\041\uffae\042\uffae\045\uffae" +
    "\046\uffae\047\uffae\050\uffae\052\uffae\001\002\000\026\025" +
    "\100\037\075\040\055\041\056\042\062\045\060\046\064" +
    "\047\076\050\077\052\101\001\002\000\026\025\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\045\uffad\046\uffad\047\uffad" +
    "\050\uffad\052\uffad\001\002\000\026\025\100\037\075\040" +
    "\055\041\056\042\062\045\060\046\064\047\076\050\077" +
    "\052\101\001\002\000\016\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\036\uffcc\001\002\000\036\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\032\uffca\036\uffca\051\120\056\uffca\057" +
    "\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\001\002" +
    "\000\026\025\100\037\075\040\055\041\056\042\062\045" +
    "\060\046\064\047\076\050\077\052\101\001\002\000\036" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\036\uffc8\051" +
    "\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8" +
    "\064\uffc8\001\002\000\026\025\100\037\075\040\055\041" +
    "\056\042\062\045\060\046\064\047\076\050\077\052\101" +
    "\001\002\000\036\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\036\uffc7\051\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7" +
    "\062\uffc7\063\uffc7\064\uffc7\001\002\000\026\025\100\037" +
    "\075\040\055\041\056\042\062\045\060\046\064\047\076" +
    "\050\077\052\101\001\002\000\026\025\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8" +
    "\052\uffa8\001\002\000\026\025\100\037\075\040\055\041" +
    "\056\042\062\045\060\046\064\047\076\050\077\052\101" +
    "\001\002\000\026\025\uffaa\037\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\052\uffaa\001\002" +
    "\000\026\025\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\052\uffa9\001\002\000\026" +
    "\025\100\037\075\040\055\041\056\042\062\045\060\046" +
    "\064\047\076\050\077\052\101\001\002\000\046\026\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\032\uffc4\036\uffc4\051\uffc4\052" +
    "\uffc4\053\127\054\130\055\125\056\uffc4\057\uffc4\060\uffc4" +
    "\061\uffc4\062\uffc4\063\uffc4\064\uffc4\001\002\000\040\026" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\036\uffc5\051\uffc5" +
    "\052\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\064\uffc5\001\002\000\052\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\036\uffc2\043\uffc2\044\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2" +
    "\061\uffc2\062\uffc2\063\uffc2\064\uffc2\001\002\000\004\042" +
    "\142\001\002\000\060\026\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\036\uffbb\043\uffbb\044\uffbb\051\uffbb\052" +
    "\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\001" +
    "\002\000\026\025\100\037\075\040\055\041\056\042\062" +
    "\045\060\046\064\047\076\050\077\052\101\001\002\000" +
    "\004\036\141\001\002\000\060\026\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\033\uffbd\036\uffbd\043\uffbd\044\uffbd\051" +
    "\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066" +
    "\uffbd\001\002\000\060\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\036\uffbc\043\uffbc\044\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\001" +
    "\002\000\026\025\100\037\075\040\055\041\056\042\062" +
    "\045\060\046\064\047\076\050\077\052\101\001\002\000" +
    "\006\026\uffcf\032\uffcf\001\002\000\052\026\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\036\uffbf\043\uffbf\044\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\001\002\000" +
    "\006\030\uffd9\031\uffd9\001\002\000\006\030\uffd6\031\uffd6" +
    "\001\002\000\006\030\uffde\031\uffde\001\002\000\004\027" +
    "\004\001\002\000\010\012\uffd3\030\uffd3\031\uffd3\001\002" +
    "\000\014\002\001\012\001\024\001\030\001\031\001\001" +
    "\002\000\006\030\uffd7\031\uffd7\001\002\000\004\027\004" +
    "\001\002\000\006\030\uffdc\031\uffdc\001\002\000\004\027" +
    "\004\001\002\000\006\030\uffdb\031\uffdb\001\002\000\006" +
    "\030\uffda\031\uffda\001\002\000\012\024\ufff1\030\ufff1\031" +
    "\ufff1\032\ufff1\001\002\000\006\024\ufffa\031\ufffa\001\002" +
    "\000\004\025\165\001\002\000\022\004\014\005\011\006" +
    "\025\007\020\014\017\026\ufff6\042\016\065\013\001\002" +
    "\000\004\027\004\001\002\000\006\024\ufff9\031\ufff9\001" +
    "\002\000\006\026\ufff4\032\ufff4\001\002\000\004\026\201" +
    "\001\002\000\006\035\176\042\177\001\002\000\006\026" +
    "\ufff7\032\174\001\002\000\020\004\014\005\011\006\025" +
    "\007\020\014\017\042\016\065\013\001\002\000\006\026" +
    "\ufff5\032\ufff5\001\002\000\004\042\200\001\002\000\006" +
    "\026\ufff2\032\ufff2\001\002\000\006\026\ufff3\032\ufff3\001" +
    "\002\000\004\027\ufff8\001\002\000\020\004\014\005\011" +
    "\006\025\007\020\014\017\042\016\065\013\001\002\000" +
    "\006\030\uffe4\032\uffe4\001\002\000\006\030\206\032\205" +
    "\001\002\000\020\004\014\005\011\006\025\007\020\014" +
    "\017\042\016\065\013\001\002\000\010\035\uffeb\042\uffeb" +
    "\066\uffeb\001\002\000\006\030\uffe5\032\uffe5\001\002\000" +
    "\004\037\211\001\002\000\004\036\212\001\002\000\010" +
    "\035\uffef\042\uffef\066\uffef\001\002\000\010\035\uffed\042" +
    "\uffed\066\uffed\001\002\000\024\004\014\005\011\006\025" +
    "\007\020\010\021\014\017\022\022\042\016\065\013\001" +
    "\002\000\030\011\uffff\013\uffff\015\uffff\016\uffff\017\uffff" +
    "\020\uffff\021\uffff\023\uffff\027\uffff\030\uffff\034\uffff\001" +
    "\002\000\006\024\ufffd\031\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\002\004\001\001\000\022\003\026\004" +
    "\006\005\022\024\023\025\025\026\014\027\011\030\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\212\030\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\024\162\025\025\026" +
    "\014\027\011\030\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\002" +
    "\033\006\035\007\034\010\045\011\036\012\031\001\001" +
    "\000\026\031\160\032\072\033\071\034\070\035\067\036" +
    "\066\037\065\040\064\041\062\042\053\001\001\000\026" +
    "\031\156\032\072\033\071\034\070\035\067\036\066\037" +
    "\065\040\064\041\062\042\053\001\001\000\002\001\001" +
    "\000\026\031\153\032\072\033\071\034\070\035\067\036" +
    "\066\037\065\040\064\041\062\042\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\031\150\032\072\033\071\034\070\035\067" +
    "\036\066\037\065\040\064\041\062\042\053\001\001\000" +
    "\002\001\001\000\026\031\147\032\072\033\071\034\070" +
    "\035\067\036\066\037\065\040\064\041\062\042\053\001" +
    "\001\000\026\031\146\032\072\033\071\034\070\035\067" +
    "\036\066\037\065\040\064\041\062\042\053\001\001\000" +
    "\026\031\145\032\072\033\071\034\070\035\067\036\066" +
    "\037\065\040\064\041\062\042\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\033\011\047\012\031" +
    "\001\001\000\002\001\001\000\004\020\051\001\001\000" +
    "\002\001\001\000\032\021\073\022\060\031\056\032\072" +
    "\033\071\034\070\035\067\036\066\037\065\040\064\041" +
    "\062\042\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\037\144\040" +
    "\064\041\062\042\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\032\102\033\071\034" +
    "\070\035\067\036\066\037\065\040\064\041\062\042\053" +
    "\001\001\000\012\037\101\040\064\041\062\042\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\034\116\035\067\036\066\037\065\040\064\041\062\042" +
    "\053\001\001\000\002\001\001\000\024\032\115\033\071" +
    "\034\070\035\067\036\066\037\065\040\064\041\062\042" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\035\120\036\066\037\065\040\064\041\062\042\053\001" +
    "\001\000\002\001\001\000\016\035\122\036\066\037\065" +
    "\040\064\041\062\042\053\001\001\000\002\001\001\000" +
    "\012\037\133\040\064\041\062\042\053\001\001\000\002" +
    "\001\001\000\016\035\132\036\066\037\065\040\064\041" +
    "\062\042\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\036\131\037\065\040\064\041\062\042\053\001" +
    "\001\000\004\044\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\031" +
    "\137\032\072\033\071\034\070\035\067\036\066\037\065" +
    "\040\064\041\062\042\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\031\143\032\072" +
    "\033\071\034\070\035\067\036\066\037\065\040\064\041" +
    "\062\042\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\155\001\001\000\002\001" +
    "\001\000\004\002\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\165\001\001\000\020\015\170\016\172\017\167\025\171" +
    "\026\014\027\011\030\007\001\001\000\004\002\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\174\025" +
    "\171\026\014\027\011\030\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\023\203\024\202\025\025\026\014" +
    "\027\011\030\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\024\206\025\025\026\014\027\011\030\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\215\024\023\025\025\026\014\027\011\030" +
    "\007\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


  ClaseSemanticaTiny sem = new ClaseSemanticaTiny();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // bloque ::= LLAPERT seccion_declaraciones_opt seccion_instrucciones_opt LLCIERRE 
            {
              Bloq RESULT =null;
		SecDecs secdecs = (SecDecs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		SecIs secis = (SecIs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = sem.bloq(secdecs, secis); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("bloque",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= bloque EOF 
            {
              Object RESULT =null;
		Bloq start_val = (Bloq)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // seccion_declaraciones_opt ::= seccion_declaraciones FINALASIG 
            {
              SecDecs RESULT =null;
		LDecs decs = (LDecs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = sem.si_decs(decs); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("seccion_declaraciones_opt",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // seccion_declaraciones_opt ::= 
            {
              SecDecs RESULT =null;
		 RESULT = sem.no_decs(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("seccion_declaraciones_opt",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // seccion_declaraciones ::= seccion_declaraciones PCOMA declaracion 
            {
              LDecs RESULT =null;
		LDecs decs = (LDecs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.muchas_decs(decs,dec);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("seccion_declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // seccion_declaraciones ::= declaracion 
            {
              LDecs RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.una_dec(dec);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("seccion_declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= tipo_nombre 
            {
              Dec RESULT =null;
		TipoNom tip = (TipoNom)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.dec_base(tip); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= TYPE tipo_nombre 
            {
              Dec RESULT =null;
		TipoNom tip = (TipoNom)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.dec_type(tip); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= PROC IDEN parametros_formales bloque 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ParamFs paramf = (ParamFs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Bloq bloq = (Bloq)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_proc(id.str(), paramf, bloq).ponFila(id.fila()).ponCol(id.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametros_formales ::= PAPERT lista_parametros_opt PCIERRE 
            {
              ParamFs RESULT =null;
		ParamFs lparamf = (ParamFs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = lparamf; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametros_formales",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_parametros_opt ::= lista_parametros 
            {
              ParamFs RESULT =null;
		LParamFs lparamf = (LParamFs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.si_params_f(lparamf); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros_opt",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_parametros_opt ::= 
            {
              ParamFs RESULT =null;
		 RESULT = sem.no_params_f(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros_opt",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_parametros ::= lista_parametros COMA parametro 
            {
              LParamFs RESULT =null;
		LParamFs lparamf = (LParamFs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ParamF paramf = (ParamF)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.muchos_params_f(lparamf, paramf);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_parametros ::= parametro 
            {
              LParamFs RESULT =null;
		ParamF paramf = (ParamF)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.un_param_f(paramf);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametro ::= tipo PARAMREF IDEN 
            {
              ParamF RESULT =null;
		Tipo tip = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (ParamF)sem.si_refparam_f(tip, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametro",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametro ::= tipo IDEN 
            {
              ParamF RESULT =null;
		Tipo tip = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (ParamF)sem.no_refparam_f(tip, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametro",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_nombre ::= tipo IDEN 
            {
              TipoNom RESULT =null;
		Tipo tip = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (TipoNom)sem.tipo_nombre(tip, id.str()).ponFila(id.fila()).ponCol(id.col());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_nombre",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= tipo0 
            {
              Tipo RESULT =null;
		Tipo tip = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = tip; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo0 ::= tipo0 CAPERT LITENT CCIERRE 
            {
              Tipo RESULT =null;
		Tipo tip = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		StringLocalizado lit = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = (Tipo)sem.tipo_array(tip, lit.str()).ponFila(lit.fila()).ponCol(lit.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo0",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo0 ::= tipo1 
            {
              Tipo RESULT =null;
		Tipo tip = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = tip; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo0",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo1 ::= INDIR tipo1 
            {
              Tipo RESULT =null;
		Tipo tip = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.tipo_indir(tip); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo1",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo1 ::= tipo_base 
            {
              Tipo RESULT =null;
		Tipo tip = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = tip; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo1",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo_base ::= STRUCT LLAPERT lista_campos LLCIERRE 
            {
              Tipo RESULT =null;
		LCampos lcampos = (LCampos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = sem.tipo_struct(lcampos); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_base",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_base ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_int(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_base",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_base ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_real(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_base",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo_base ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_bool(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_base",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo_base ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_string(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_base",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo_base ::= IDEN 
            {
              Tipo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Tipo)sem.tipo_type(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo_base",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_campos ::= lista_campos COMA tipo_nombre 
            {
              LCampos RESULT =null;
		LCampos lcampos = (LCampos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TipoNom tip = (TipoNom)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.muchos_campos(lcampos, tip); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_campos",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_campos ::= tipo_nombre 
            {
              LCampos RESULT =null;
		TipoNom tip = (TipoNom)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.un_campo(tip); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_campos",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // seccion_instrucciones_opt ::= seccion_instrucciones 
            {
              SecIs RESULT =null;
		LIs secis = (LIs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.si_ins(secis); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones_opt",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // seccion_instrucciones_opt ::= 
            {
              SecIs RESULT =null;
		 RESULT = sem.no_ins(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones_opt",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // seccion_instrucciones ::= lista_instrucciones 
            {
              LIs RESULT =null;
		LIs lis = (LIs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = lis; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_instrucciones ::= lista_instrucciones PCOMA instruccion 
            {
              LIs RESULT =null;
		LIs lis = (LIs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		I i = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.muchas_ins(lis, i); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_instrucciones ::= instruccion 
            {
              LIs RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.una_ins(i); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= ARROBA expresion 
            {
              I RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.ins_eval(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= if_ins 
            {
              I RESULT =null;
		I ifi = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ifi; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= if_ins ELSE bloque 
            {
              I RESULT =null;
		I ifi = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Bloq bloq = (Bloq)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.ins_if_else(ifi, bloq); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= WHILE expresion bloque 
            {
              I RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Bloq bloq = (Bloq)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.ins_while(e, bloq); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= READ expresion 
            {
              I RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.ins_read(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= WRITE expresion 
            {
              I RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.ins_write(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= NL 
            {
              I RESULT =null;
		 RESULT = sem.ins_nl(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= NEW expresion 
            {
              I RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.ins_new(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= DELETE expresion 
            {
              I RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.ins_delete(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= CALL IDEN parametros_reales 
            {
              I RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ParamRs p = (ParamRs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (I)sem.ins_call(id.str(), p).ponFila(id.fila()).ponCol(id.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= bloque 
            {
              I RESULT =null;
		Bloq bloq = (Bloq)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.ins_bloque(bloq); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // if_ins ::= IF expresion bloque 
            {
              I RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Bloq bloq = (Bloq)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.ins_if(e, bloq); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("if_ins",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros_reales ::= PAPERT lista_expresiones_opt PCIERRE 
            {
              ParamRs RESULT =null;
		ParamRs lexp = (ParamRs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = lexp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametros_reales",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // lista_expresiones_opt ::= lista_expresiones 
            {
              ParamRs RESULT =null;
		LParamRs lexp = (LParamRs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.si_params_r(lexp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_expresiones_opt",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // lista_expresiones_opt ::= 
            {
              ParamRs RESULT =null;
		 RESULT = sem.no_params_r(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_expresiones_opt",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lista_expresiones ::= lista_expresiones COMA expresion 
            {
              LParamRs RESULT =null;
		LParamRs lexp = (LParamRs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.muchos_params_r(lexp, e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_expresiones",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lista_expresiones ::= expresion 
            {
              LParamRs RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.un_param_r(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_expresiones",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= E0 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E0 ::= E1 ASIG E0 
            {
              Exp RESULT =null;
		Exp o1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Exp o2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Exp)sem.mkopbin(op.str(), o1, o2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E1 ::= E1 op_relacional E2 
            {
              Exp RESULT =null;
		Exp o1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Exp o2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Exp)sem.mkopbin(op.str(), o1, o2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E2 ::= E2 SUMA E3 
            {
              Exp RESULT =null;
		Exp o1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Exp o2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Exp)sem.mkopbin(op.str(), o1, o2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E2 ::= E3 RESTA E3 
            {
              Exp RESULT =null;
		Exp o1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Exp o2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Exp)sem.mkopbin(op.str(), o1, o2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E3 ::= E4 AND E3 
            {
              Exp RESULT =null;
		Exp o1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Exp o2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_and(o1, o2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E3 ::= E4 OR E4 
            {
              Exp RESULT =null;
		Exp o1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Exp o2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_or(o1, o2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E4 ::= E4 op_mult E5 
            {
              Exp RESULT =null;
		Exp o1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Exp o2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Exp)sem.mkopbin(op.str(), o1, o2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E5 ::= RESTA E5 
            {
              Exp RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_menos(o).ponFila(op.fila()).ponCol(op.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E5 ::= NOT E5 
            {
              Exp RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_not(o).ponFila(op.fila()).ponCol(op.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E6 ::= E6 CAPERT expresion CCIERRE 
            {
              Exp RESULT =null;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		StringLocalizado c = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = (Exp)sem.exp_index(o, e).ponFila(c.fila()).ponCol(c.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E6 ::= E6 PUNTO IDEN 
            {
              Exp RESULT =null;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_reg(o, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E6 ::= E6 INDIR 
            {
              Exp RESULT =null;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_indir(o).ponFila(op.fila()).ponCol(op.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E6 ::= E7 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E7 ::= expresion_basica 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E7 ::= PAPERT E0 PCIERRE 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion_basica ::= TRUE 
            {
              Exp RESULT =null;
		StringLocalizado e = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_true().ponFila(e.fila()).ponCol(e.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion_basica ::= FALSE 
            {
              Exp RESULT =null;
		StringLocalizado e = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_false().ponFila(e.fila()).ponCol(e.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion_basica ::= LITENT 
            {
              Exp RESULT =null;
		StringLocalizado e = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_entero(e.str()).ponFila(e.fila()).ponCol(e.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion_basica ::= LITREAL 
            {
              Exp RESULT =null;
		StringLocalizado e = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_real(e.str()).ponFila(e.fila()).ponCol(e.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion_basica ::= LITCADENA 
            {
              Exp RESULT =null;
		StringLocalizado e = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_cadena(e.str()).ponFila(e.fila()).ponCol(e.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion_basica ::= IDEN 
            {
              Exp RESULT =null;
		StringLocalizado e = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_iden(e.str()).ponFila(e.fila()).ponCol(e.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion_basica ::= NULL 
            {
              Exp RESULT =null;
		StringLocalizado e = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_null().ponFila(e.fila()).ponCol(e.col()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion_basica",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // op_relacional ::= MENOR 
            {
              StringLocalizado RESULT =null;
		StringLocalizado o = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = o; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_relacional",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // op_relacional ::= MENORIG 
            {
              StringLocalizado RESULT =null;
		StringLocalizado o = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = o; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_relacional",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // op_relacional ::= MAYOR 
            {
              StringLocalizado RESULT =null;
		StringLocalizado o = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = o; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_relacional",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // op_relacional ::= MAYORIG 
            {
              StringLocalizado RESULT =null;
		StringLocalizado o = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = o; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_relacional",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // op_relacional ::= IGUAL 
            {
              StringLocalizado RESULT =null;
		StringLocalizado o = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = o; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_relacional",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // op_relacional ::= DISTINTO 
            {
              StringLocalizado RESULT =null;
		StringLocalizado o = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = o; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_relacional",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // op_mult ::= MUL 
            {
              StringLocalizado RESULT =null;
		StringLocalizado o = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = o; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_mult",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // op_mult ::= DIV 
            {
              StringLocalizado RESULT =null;
		StringLocalizado o = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = o; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_mult",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // op_mult ::= MOD 
            {
              StringLocalizado RESULT =null;
		StringLocalizado o = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = o; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op_mult",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

