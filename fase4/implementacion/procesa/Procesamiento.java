package procesa;

import asint.SintaxisAbstractaTiny;
import asint.SintaxisAbstractaTiny.Bloq;
import asint.SintaxisAbstractaTiny.Dec_base;
import asint.SintaxisAbstractaTiny.Dec_proc;
import asint.SintaxisAbstractaTiny.Dec_type;
import asint.SintaxisAbstractaTiny.Exp_and;
import asint.SintaxisAbstractaTiny.Exp_asig;
import asint.SintaxisAbstractaTiny.Exp_cadena;
import asint.SintaxisAbstractaTiny.Exp_dist;
import asint.SintaxisAbstractaTiny.Exp_div;
import asint.SintaxisAbstractaTiny.Exp_entero;
import asint.SintaxisAbstractaTiny.Exp_false;
import asint.SintaxisAbstractaTiny.Exp_iden;
import asint.SintaxisAbstractaTiny.Exp_ig;
import asint.SintaxisAbstractaTiny.Exp_index;
import asint.SintaxisAbstractaTiny.Exp_indir;
import asint.SintaxisAbstractaTiny.Exp_mayor;
import asint.SintaxisAbstractaTiny.Exp_mayor_ig;
import asint.SintaxisAbstractaTiny.Exp_menor;
import asint.SintaxisAbstractaTiny.Exp_menor_ig;
import asint.SintaxisAbstractaTiny.Exp_menos;
import asint.SintaxisAbstractaTiny.Exp_mod;
import asint.SintaxisAbstractaTiny.Exp_mul;
import asint.SintaxisAbstractaTiny.Exp_not;
import asint.SintaxisAbstractaTiny.Exp_null;
import asint.SintaxisAbstractaTiny.Exp_or;
import asint.SintaxisAbstractaTiny.Exp_real;
import asint.SintaxisAbstractaTiny.Exp_reg;
import asint.SintaxisAbstractaTiny.Exp_resta;
import asint.SintaxisAbstractaTiny.Exp_suma;
import asint.SintaxisAbstractaTiny.Exp_true;
import asint.SintaxisAbstractaTiny.Ins_bloque;
import asint.SintaxisAbstractaTiny.Ins_call;
import asint.SintaxisAbstractaTiny.Ins_delete;
import asint.SintaxisAbstractaTiny.Ins_eval;
import asint.SintaxisAbstractaTiny.Ins_if;
import asint.SintaxisAbstractaTiny.Ins_if_else;
import asint.SintaxisAbstractaTiny.Ins_new;
import asint.SintaxisAbstractaTiny.Ins_nl;
import asint.SintaxisAbstractaTiny.Ins_read;
import asint.SintaxisAbstractaTiny.Ins_while;
import asint.SintaxisAbstractaTiny.Ins_write;
import asint.SintaxisAbstractaTiny.Muchas_decs;
import asint.SintaxisAbstractaTiny.Muchas_ins;
import asint.SintaxisAbstractaTiny.Muchos_campos;
import asint.SintaxisAbstractaTiny.Muchos_params_f;
import asint.SintaxisAbstractaTiny.Muchos_params_r;
import asint.SintaxisAbstractaTiny.No_decs;
import asint.SintaxisAbstractaTiny.No_ins;
import asint.SintaxisAbstractaTiny.No_params_f;
import asint.SintaxisAbstractaTiny.No_params_r;
import asint.SintaxisAbstractaTiny.No_refparam_f;
import asint.SintaxisAbstractaTiny.Si_decs;
import asint.SintaxisAbstractaTiny.Si_ins;
import asint.SintaxisAbstractaTiny.Si_params_f;
import asint.SintaxisAbstractaTiny.Si_params_r;
import asint.SintaxisAbstractaTiny.Si_refparam_f;
import asint.SintaxisAbstractaTiny.TipoNom;
import asint.SintaxisAbstractaTiny.Tipo_array;
import asint.SintaxisAbstractaTiny.Tipo_bool;
import asint.SintaxisAbstractaTiny.Tipo_indir;
import asint.SintaxisAbstractaTiny.Tipo_int;
import asint.SintaxisAbstractaTiny.Tipo_real;
import asint.SintaxisAbstractaTiny.Tipo_string;
import asint.SintaxisAbstractaTiny.Tipo_struct;
import asint.SintaxisAbstractaTiny.Tipo_type;
import asint.SintaxisAbstractaTiny.Un_campo;
import asint.SintaxisAbstractaTiny.Un_param_f;
import asint.SintaxisAbstractaTiny.Un_param_r;
import asint.SintaxisAbstractaTiny.Una_dec;
import asint.SintaxisAbstractaTiny.Una_ins;

public interface Procesamiento {
	void procesa(Bloq bloq);
	void procesa(Si_decs decs);
	void procesa(No_decs decs);
	void procesa(Muchas_decs decs);
	void procesa(Una_dec dec);
	void procesa(Dec_base dec);
	void procesa(Dec_type dec);
	void procesa(Dec_proc dec);
	void procesa(Si_params_f paramfs);
	void procesa(No_params_f paramfs);
	void procesa(Muchos_params_f paramfs);
	void procesa(Un_param_f paramf);
	void procesa(Si_refparam_f paramf);
	void procesa(No_refparam_f paramf);
	void procesa(TipoNom tiponom);
	void procesa(Tipo_array tipo);
	void procesa(Tipo_indir tipo);
	void procesa(Tipo_struct tipo);
	void procesa(Tipo_int tipo);
	void procesa(Tipo_real tipo);
	void procesa(Tipo_bool tipo);
	void procesa(Tipo_string tipo);
	void procesa(Tipo_type tipo);
	void procesa(Muchos_campos campos);
	void procesa(Un_campo campo);
	void procesa(Si_ins ins);
	void procesa(No_ins ins);
	void procesa(Muchas_ins ins);
	void procesa(Una_ins in);
	void procesa(Ins_eval in);
	void procesa(Ins_if in);
	void procesa(Ins_if_else in);
	void procesa(Ins_while in);
	void procesa(Ins_read in);
	void procesa(Ins_write in);
	void procesa(Ins_nl in);
	void procesa(Ins_new in);
	void procesa(Ins_delete in);
	void procesa(Ins_call in);
	void procesa(Ins_bloque in);
	void procesa(Si_params_r paramrs);
	void procesa(No_params_r paramrs);
	void procesa(Muchos_params_r paramrs);
	void procesa(Un_param_r paramr);
	void procesa(Exp_asig exp);
	void procesa(Exp_menor exp);
	void procesa(Exp_menor_ig exp);
	void procesa(Exp_mayor exp);
	void procesa(Exp_mayor_ig exp);
	void procesa(Exp_ig exp);
	void procesa(Exp_dist exp);
	void procesa(Exp_suma exp);
	void procesa(Exp_resta exp);
	void procesa(Exp_and exp);
	void procesa(Exp_or exp);
	void procesa(Exp_mul exp);
	void procesa(Exp_div exp);
	void procesa(Exp_mod exp);
	void procesa(Exp_menos exp);
	void procesa(Exp_not exp);
	void procesa(Exp_index exp);
	void procesa(Exp_reg exp);
	void procesa(Exp_indir exp);
	void procesa(Exp_entero exp);
	void procesa(Exp_real exp);
	void procesa(Exp_true exp);
	void procesa(Exp_false exp);
	void procesa(Exp_cadena exp);
	void procesa(Exp_iden exp);
	void procesa(Exp_null exp);
}
