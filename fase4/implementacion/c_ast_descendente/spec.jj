options  {
  STATIC=false;
  DEBUG_PARSER=false;
}  
PARSER_BEGIN(AnalizadorSintacticoTiny)
package c_ast_descendente;
import asint.ClaseSemanticaTiny;
import errors.GestionErroresTiny;
import asint.SintaxisAbstractaTiny.Bloq;
import asint.SintaxisAbstractaTiny.SecDecs;
import asint.SintaxisAbstractaTiny.LDecs;
import asint.SintaxisAbstractaTiny.Dec;
import asint.SintaxisAbstractaTiny.SecIs;
import asint.SintaxisAbstractaTiny.LIs;
import asint.SintaxisAbstractaTiny.I;
import asint.SintaxisAbstractaTiny.ParamFs;
import asint.SintaxisAbstractaTiny.LParamFs;
import asint.SintaxisAbstractaTiny.ParamF;
import asint.SintaxisAbstractaTiny.ParamRs;
import asint.SintaxisAbstractaTiny.LParamRs;
import asint.SintaxisAbstractaTiny.LCampos;
import asint.SintaxisAbstractaTiny.TipoNom;
import asint.SintaxisAbstractaTiny.Tipo;
import asint.SintaxisAbstractaTiny.Exp;
import c_ast_ascendente.UnidadLexica.StringLocalizado;

public class AnalizadorSintacticoTiny {
   private ClaseSemanticaTiny sem = new ClaseSemanticaTiny();   
}
PARSER_END(AnalizadorSintacticoTiny)

  TOKEN:{<#letra:["A"-"Z","a"-"z"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">} 
  TOKEN:{<#parteEntera:(["+"]|["-"])? <digitoPositivo> (<digito>)* |"0">} 
  TOKEN:{<#parteDecimal: (<digito>)* <digitoPositivo> | "0">}
  TOKEN:{<#parteExponencial: ("e"|"E")<parteEntera>>}
  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  SKIP:{<"##"(~["\n"])*>}
  TOKEN:{<bool:("b"|"B")("o"|"O")("o"|"O")("l"|"L")>} 
  TOKEN:{<INT:("i"|"I")("n"|"N")("t"|"T")>}  
  TOKEN:{<real:("r"|"R")("e"|"E")("a"|"A")("l"|"L")>}
  TOKEN:{<string:("s"|"S")("t"|"T")("r"|"R")("i"|"I")("n"|"N")("g"|"G")>}
  TOKEN:{<and:("a"|"A")("n"|"N")("d"|"D")>}
  TOKEN:{<or:("o"|"O")("r"|"R")>}
  TOKEN:{<not:("n"|"N")("o"|"O")("t"|"T")>}
  TOKEN:{<TRUE:("t"|"T")("r"|"R")("u"|"U")("e"|"E")>}
  TOKEN:{<FALSE:("f"|"F")("a"|"A")("l"|"L")("s"|"S")("e"|"E")>}
  TOKEN:{<NULL:("n"|"N")("u"|"U")("l"|"L")("l"|"L")>}
  TOKEN:{<proc:("p"|"P")("r"|"R")("o"|"O")("c"|"C")>}
  TOKEN:{<IF:("i"|"I")("f"|"F")>}
  TOKEN:{<ELSE:("e"|"E")("l"|"L")("s"|"S")("e"|"E")>}
  TOKEN:{<WHILE:("w"|"W")("h"|"H")("i"|"I")("l"|"L")("e"|"E")>}
  TOKEN:{<struct:("s"|"S")("t"|"T")("r"|"R")("u"|"U")("c"|"C")("t"|"T")>}
  TOKEN:{<NEW:("n"|"N")("e"|"E")("w"|"W")>}
  TOKEN:{<delete:("d"|"D")("e"|"E")("l"|"L")("e"|"E")("t"|"T")("e"|"E")>}
  TOKEN:{<read:("r"|"R")("e"|"E")("a"|"A")("d"|"D")>}
  TOKEN:{<write:("w"|"W")("r"|"R")("i"|"I")("t"|"T")("e"|"E")>}
  TOKEN:{<nl:("n"|"N")("l"|"L")>}
  TOKEN:{<type:("t"|"T")("y"|"Y")("p"|"P")("e"|"E")>}
  TOKEN:{<call:("c"|"C")("a"|"A")("l"|"L")("l"|"L")>}
  TOKEN:{<literalEntero:<parteEntera>>}
  TOKEN:{<literalReal:<parteEntera>("."<parteDecimal>|<parteExponencial>|"."<parteDecimal><parteExponencial>)>}
  TOKEN:{<identificador:("_"|<letra>)(<letra>|<digito>|"_")*>}
  TOKEN:{<literalCadena:"\""(~["\""])*"\"">}

  TOKEN:{<suma:("+")>}
  TOKEN:{<resta:("-")>}
  TOKEN:{<mul:("*")>}
  TOKEN:{<div:("/")>}
  TOKEN:{<mod:("%")>}
  TOKEN:{<menor:("<")>}
  TOKEN:{<mayor:(">")>}
  TOKEN:{<igual:("==")>}
  TOKEN:{<distinto:("!=")>}
  TOKEN:{<menorIgual:("<=")>}
  TOKEN:{<mayorIgual:(">=")>}
  TOKEN:{<asig:("=")>}
  TOKEN:{<finalAsig:("&&")>}
  TOKEN:{<parenApert:("(")>}
  TOKEN:{<parenCierre:(")")>}
  TOKEN:{<llaveApert:("{")>}
  TOKEN:{<llaveCierre:("}")>}
  TOKEN:{<puntoComa:(";")>}
  TOKEN:{<coma:(",")>}
  TOKEN:{<punto:(".")>}
  TOKEN:{<arroba:("@")>}
  TOKEN:{<indireccion:("^")>}
  TOKEN:{<paramRef:("&")>}
  TOKEN:{<corcheteApert:("[")>}
  TOKEN:{<corcheteCierre:("]")>}
  
  Bloq analiza()   : 
      {Bloq prog;} 
      {
         prog = bloque() fin()
            {return prog;} 
      }
  
  void fin() :
	{}
	{<EOF> | "$$"}
  
  Bloq bloque()  : 
	{SecDecs secdecs; SecIs secis;} 
	{
		<llaveApert> secdecs = seccion_declaraciones_opt() secis = seccion_instrucciones_opt() <llaveCierre>
		{return sem.bloq(secdecs, secis);}
	}
  
  SecDecs seccion_declaraciones_opt()  : 
	{LDecs ldecs;} 
	{
		ldecs = seccion_declaraciones() <finalAsig>
		{return sem.si_decs(ldecs);}
		| 
		{return sem.no_decs();}
	}
  LDecs seccion_declaraciones()  : 
	{Dec dec; LDecs r;} 
	{
		dec = declaracion() r = resto_sd(sem.una_dec(dec))
		{return r;}
	}
  LDecs resto_sd(LDecs rh)  : 
	{Dec dec; LDecs r;} 
	{
		<puntoComa> dec = declaracion() r = resto_sd(sem.muchas_decs(rh, dec)) 
		{return r;}
		| 
		{return rh;}
	}
  Dec declaracion()  : 
	{TipoNom tiponom; Token id; ParamFs p; Bloq bloq;} 
	{
		tiponom = tipo_nombre() 
		{return (Dec)sem.dec_base(tiponom);}
		| 
		<type> tiponom = tipo_nombre()
		{return (Dec)sem.dec_type(tiponom);}
		| 
		<proc> id = <identificador> p = parametros_formales() bloq = bloque()
		{return (Dec)sem.dec_proc(id.image, p, bloq).ponFila(id.beginLine).ponCol(id.beginColumn);}
	}
  ParamFs parametros_formales()  : 
	{ParamFs p;} 
	{
		<parenApert> p = lista_parametros_opt() <parenCierre>
		{return p;}
	}
  ParamFs lista_parametros_opt()  : 
	{LParamFs lp;} 
	{
		lp = lista_parametros() 
		{return (ParamFs)sem.si_params_f(lp);}
		| 
		{return (ParamFs)sem.no_params_f();}
	}
  LParamFs lista_parametros()  : 
	{LParamFs lp; ParamF p;} 
	{
		p = parametro() lp = resto_lp(sem.un_param_f(p))
		{return lp;}
	}
  LParamFs resto_lp(LParamFs rh)  : 
	{LParamFs lp; ParamF p;}
	{
		<coma> p = parametro() lp = resto_lp(sem.muchos_params_f(rh, p)) 
		{return lp;}
		| 
		{return rh;}
	}
  ParamF parametro()  : 
	{Tipo t; ParamF r;} 
	{
		t = tipo() r = resto_parametro(t)
		{return r;}
	}  
  ParamF resto_parametro(Tipo th)  : 
	{Token id;} 
	{
		<paramRef> id = <identificador>
		{return (ParamF)sem.si_refparam_f(th, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
		|
		id = <identificador>
		{return (ParamF)sem.no_refparam_f(th, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
	}
	
  TipoNom tipo_nombre()  : 
	{Tipo t; Token id;} 
	{
		t = tipo() id = <identificador>
		{return (TipoNom)sem.tipo_nombre(t, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
	}  
  Tipo tipo()  : 
	{Tipo t;} 
	{
		t = tipo0()
		{return t;}
	}  
  Tipo tipo0()  : 
	{Tipo t; Tipo r;} 
	{
		t = tipo1() r = resto_tipo0(t)
		{return r;}
	}  
  Tipo resto_tipo0(Tipo th)  : 
	{Tipo r; Token id;} 
	{
		<corcheteApert> id = <literalEntero> <corcheteCierre> r = resto_tipo0((Tipo)sem.tipo_array(th, id.image).ponFila(id.beginLine).ponCol(id.beginColumn)) 
		{return r;}
		| 
		{return th;}
	}  
  Tipo tipo1()  : 
	{Tipo t;} 
	{
		<indireccion> t = tipo1()
		{return (Tipo)sem.tipo_indir(t);}
		| 
		t = tipo_base()
		{return t;}
	}  
  Tipo tipo_base()  : 
	{LCampos lc; Token id;} 
	{
		<struct> <llaveApert> lc = lista_campos() <llaveCierre> 
		{return (Tipo)sem.tipo_struct(lc);}
		| 
		<INT>  
		{return (Tipo)sem.tipo_int();}
		| 
		<real>  
		{return (Tipo)sem.tipo_real();}
		| 
		<bool>
		{return (Tipo)sem.tipo_bool();}
		| 
		<string>
		{return (Tipo)sem.tipo_string();}
		| 
		id = <identificador>
		{return (Tipo)sem.tipo_type(id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
	}  
  LCampos lista_campos()  : 
	{TipoNom t; LCampos r;}
	{
		t = tipo_nombre() r = resto_lc(sem.un_campo(t))
		{return r;}
	}  
  LCampos resto_lc(LCampos th)  : 
	{TipoNom t; LCampos r;} 
	{
		<coma> t = tipo_nombre() r = resto_lc(sem.muchos_campos(th, t))
		{return r;}
		| 
		{return th;}
	}  
  
  SecIs seccion_instrucciones_opt()  : 
	{LIs secis;} 
	{
		secis = seccion_instrucciones()
		{return (SecIs)sem.si_ins(secis);} 
		| 
		{return (SecIs)sem.no_ins();}
	}  
  LIs seccion_instrucciones()  : 
	{LIs lis;} 
	{
		lis = lista_instrucciones()
		{return lis;}
	}  
  LIs lista_instrucciones()  : 
	{I i; LIs lis;} 
	{
		i = instruccion() lis = resto_li(sem.una_ins(i))
		{return lis;}
	}  
  LIs resto_li(LIs lh)  : 
	{I i; LIs lis;}
	{
		<puntoComa> i = instruccion() lis = resto_li(sem.muchas_ins(lh, i)) 
		{return lis;}
		| 
		{return lh;}
	}  
  I instruccion()  : 
	{Exp e; I i; I r; ParamRs params; Token id; Bloq bloq;} 
	{
		<arroba> e = expresion() 
		{return (I)sem.ins_eval(e);}
		| 
		i = if_ins() r = resto_ii(i) 
		{return r;}
		| 
		<WHILE> e = expresion() bloq = bloque()
		{return (I)sem.ins_while(e, bloq);}
		| 
		<read> e = expresion()
		{return (I)sem.ins_read(e);}
		| 
		<write> e = expresion()  
		{return (I)sem.ins_write(e);}
		| 
		<nl>
		{return (I)sem.ins_nl();}
		| 
		<NEW> e = expresion() 
		{return (I)sem.ins_new(e);}
		| 
		<delete> e = expresion()
		{return (I)sem.ins_delete(e);}
		| 
		<call> id = <identificador> params = parametros_reales()
		{return (I)sem.ins_call(id.image, params).ponFila(id.beginLine).ponCol(id.beginColumn);}		
		| 
		bloq = bloque()
		{return (I)sem.ins_bloque(bloq);}
	}  
  I resto_ii(I ih)  : 
	{Bloq bloq;} 
	{
		<ELSE> bloq = bloque() 
		{return (I)sem.ins_if_else(ih, bloq);}
		| 
		{return ih;}
	}    
  I if_ins()  : 
	{Exp e; Bloq bloq;} 
	{
		<IF> e = expresion() bloq = bloque()
		{return (I)sem.ins_if(e, bloq);}
	}  
  ParamRs parametros_reales()  : 
	{ParamRs p;} 
	{
		<parenApert> p = lista_expresiones_opt() <parenCierre>
		{return p;}
	}  
  ParamRs lista_expresiones_opt()  : 
	{LParamRs p;}  
	{
		p = lista_expresiones()
		{return (ParamRs)sem.si_params_r(p);}		
		| 
		{return (ParamRs)sem.no_params_r();}
	}    
  LParamRs lista_expresiones()  : 
	{LParamRs r; Exp e;} 
	{
		e = expresion() r = resto_le(sem.un_param_r(e))
		{return r;}
	}  
  LParamRs resto_le(LParamRs rh)  : 
	{LParamRs r; Exp e;} 
	{
		<coma> e = expresion() r = resto_le(sem.muchos_params_r(rh, e)) 
		{return r;}
		| 
		{return rh;}
	}  
  
  Exp expresion()  : 
	{Exp e;} 
	{
		e = E0()
		{return e;}
	}  
  Exp E0()  : 
	{Exp e, r;} 
	{
		e = E1() r = resto_E0(e)
		{return r;}
	}  
  Exp resto_E0(Exp eh)  : 
	{Exp e; Token op;} 
	{
		op = <asig> e = E0()
		{return (Exp)sem.mkopbin(op.image, eh, e).ponFila(op.beginLine).ponCol(op.beginColumn);}		
		| 
		{return eh;}
	}    
  Exp E1()  : 
	{Exp e, r;} 
	{
		e = E2() r = resto_E1(e)
		{return r;}
	}  
  Exp resto_E1(Exp eh)  : 
	{Exp e, r; Token op;} 
	{
		op = op_relacional() e = E2() r = resto_E1((Exp)sem.mkopbin(op.image, eh, e).ponFila(op.beginLine).ponCol(op.beginColumn)) 
		{return r;}		
		| 
		{return eh;}
	}  
  Exp E2()  : 
	{Exp e, rf, rr;}
	{
		e = E3() rf = resto_E2_F(e) rr = resto_E2_R((Exp)rf)
		{return rr;}
	}   
  Exp resto_E2_R(Exp eh)  : 
	{Exp e, r; Token op;}  
	{
		op = <suma> e = E3() r = resto_E2_R((Exp)sem.mkopbin(op.image, eh, e).ponFila(op.beginLine).ponCol(op.beginColumn)) 
		{return r;}
		| 
		{return eh;}
	}  
  Exp resto_E2_F(Exp eh)  : 
	{Exp e; Token op;} 
	{
		op = <resta> e = E3() 
		{return (Exp)sem.mkopbin(op.image, eh, e).ponFila(op.beginLine).ponCol(op.beginColumn);}
		| 
		{return eh;}
	} 
  Exp E3()  : 
	{Exp e, r;} 
	{
		e = E4() r = resto_E3(e)
		{return r;}
	}  
  Exp resto_E3(Exp eh)  : 
	{Exp e, r; Token op;} 
	{
		op = <and> e = E3()
		{return (Exp)sem.exp_and(eh, e).ponFila(op.beginLine).ponCol(op.beginColumn);}
		| 
		op = <or> e = E4()
		{return (Exp)sem.exp_or(eh, e).ponFila(op.beginLine).ponCol(op.beginColumn);}
		| 
		{return eh;}
	}  
  Exp E4()  : 
	{Exp e, r;} 
	{
		e = E5() r = resto_E4(e)
		{return r;}
	}  
  Exp resto_E4(Exp eh)  : 
	{Exp e, r; Token op;} 
	{
		op = op_mult() e = E5() r = resto_E4((Exp)sem.mkopbin(op.image, eh, e).ponFila(op.beginLine).ponCol(op.beginColumn)) 
		{return r;}
		| 
		{return eh;}
	}  
  Exp E5()  : 
	{Exp e; Token op;} 
	{
		op = <resta> e = E5()
		{return (Exp)sem.exp_menos(e).ponFila(op.beginLine).ponCol(op.beginColumn);}		
		| 
		op = <not> e = E5() 
		{return (Exp)sem.exp_not(e).ponFila(op.beginLine).ponCol(op.beginColumn);}
		| 
		e = E6()
		{return e;}
	}    
  Exp E6()  : 
	{Exp e, r;}  
	{
		e = E7() r = resto_E6(e)
		{return r;}
	}  
  Exp resto_E6(Exp eh)  : 
	{Exp e, r; Token op;} 
	{		
		op = <corcheteApert> e = expresion() <corcheteCierre> r = resto_E6((Exp)sem.exp_index(eh, e).ponFila(op.beginLine).ponCol(op.beginColumn)) 
		{return r;}
		| 
		<punto> op = <identificador> r = resto_E6((Exp)sem.exp_reg(eh, op.image).ponFila(op.beginLine).ponCol(op.beginColumn)) 
		{return r;}
		| 
		op = <indireccion> r = resto_E6((Exp)sem.exp_indir(eh).ponFila(op.beginLine).ponCol(op.beginColumn)) 
		{return r;}
		| 
		{return eh;}
	}  
  Exp E7()  : 
	{Exp e;} 
	{
		e = expresion_basica() 
		{return e;}
		| 
		<parenApert> e = E0() <parenCierre>
		{return e;}
	}  
  Exp expresion_basica()  : 
	{Token op;} 
	{
		op = <literalEntero>
		{return (Exp)sem.exp_entero(op.image).ponFila(op.beginLine).ponCol(op.beginColumn);}		
		| 
		op = <literalReal>
		{return (Exp)sem.exp_real(op.image).ponFila(op.beginLine).ponCol(op.beginColumn);}		
		| 
		op = <TRUE>
		{return (Exp)sem.exp_true().ponFila(op.beginLine).ponCol(op.beginColumn);}
		| 
		op = <FALSE>
		{return (Exp)sem.exp_false().ponFila(op.beginLine).ponCol(op.beginColumn);}
		| 
		op = <literalCadena> 
		{return (Exp)sem.exp_cadena(op.image).ponFila(op.beginLine).ponCol(op.beginColumn);}
		| 
		op = <identificador> 
		{return (Exp)sem.exp_iden(op.image).ponFila(op.beginLine).ponCol(op.beginColumn);}
		| 
		op = <NULL>
		{return (Exp)sem.exp_null().ponFila(op.beginLine).ponCol(op.beginColumn);}
	}  
  
  Token op_relacional()  : 
	{Token op;} 
	{
		op = <menor> 
		{return op;}
		| 
		op = <menorIgual> 
		{return op;}
		| 
		op = <mayor>
		{return op;}		
		| 
		op = <mayorIgual> 
		{return op;}
		| 
		op = <igual> 
		{return op;}
		|
		op = <distinto>
		{return op;}
	}    
  Token op_mult()  : 
	{Token op;} 
	{
		op = <mul> 
		{return op;}
		| 
		op = <div> 
		{return op;}
		| 
		op = <mod>
		{return op;}
	}  
